{
    "Arithmatic Expressions": [
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'normalized-losses' ] - df[ 'normalized-losses' ].mean())",
            "dataset": "/data/openml_rawds/autos.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (3 * df[ 'normalized-losses' ].std())",
            "dataset": "/data/openml_rawds/autos.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: (235 / df[ 'city-mpg' ])",
            "dataset": "/data/openml_rawds/autos.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (pandas.to_datetime(df[ 'deadline' ]).map(df[ 'timestamp' ]) - pandas.to_datetime(df[ 'launched' ]).map(df[ 'timestamp' ]))",
            "dataset": "/data/openml_rawds/BNG(cylinder-bands,nominal,1000000).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (100 * df[ 'Count' ])",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (100 * df[ 'Count' ].sum())",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (1 * df[ 'defects' ])",
            "dataset": "/data/openml_rawds/ar4.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (0.14 * df[ 'cos day' ])",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'cos day' ] + df[ 'cos month' ])",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (0.14 * df[ 'sin day' ])",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'x2' ] / (df[ 'shape' ] [0]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'x3' ] - 1)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (UNKNOWN.zeros(df[ 'x3' ]) - UNKNOWN.zeros(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (UNKNOWN.zeros(df[ 'x3' ]) - UNKNOWN.expr(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (UNKNOWN.zeros(df[ 'x3' ]) - UNKNOWN.reshape(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (UNKNOWN.zeros((df[ 'x3' ] - 1)) - UNKNOWN.zeros(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (UNKNOWN.zeros((df[ 'x3' ] - 1)) - UNKNOWN.expr(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (UNKNOWN.zeros((df[ 'x3' ] - 1)) - UNKNOWN.reshape(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (UNKNOWN.expr(df[ 'x3' ]) - UNKNOWN.zeros(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (UNKNOWN.expr(df[ 'x3' ]) - UNKNOWN.expr(df[ 'x3' ]))",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'n' ] / df[ 'batch_size' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (1 * df[ 'G' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (2 + df[ 'e' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (2 + df[ 'values' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'values' ] - df[ 'values' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'A' ] + df[ 'B' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (100 * df[ 'current_active' ])",
            "dataset": "/data/openml_rawds/braziltourism.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (100 * df[ 'max_active' ])",
            "dataset": "/data/openml_rawds/braziltourism.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (0.425144 * df[ 'mpg' ])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: (numpy.max(df[ 'displacement' ]) - numpy.min(df[ 'displacement' ]))",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'treat' ] - 1)",
            "dataset": "/data/openml_rawds/sleuth_case1102.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (\"../input/train/\" + (df[ 'p1' ] [100]))",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (\"../input/train/\" + (df[ 'p2' ] [100]))",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'cp' ] / df[ 'thalachh' ])",
            "dataset": "/data/openml_rawds/BNG(heart-c,nominal,1000000).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (\"There are %s patients in this dataset.\" % df[ 'case_number' ].max())",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'number_of_days' ] / df[ 'number_of_days' ].max())",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (100 * df[ 'population' ])",
            "dataset": "/data/openml_rawds/longley.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'rfc' ] + df[ 'xgb' ])",
            "dataset": "/data/openml_rawds/jEdit_4.0_4.2.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'gbc' ] + df[ 'rfc' ] + df[ 'xgb' ])",
            "dataset": "/data/openml_rawds/jEdit_4.0_4.2.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (2 + df[ 'theta1' ])",
            "dataset": "/data/openml_rawds/puma32H.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'theta1' ] + df[ 'theta1' ])",
            "dataset": "/data/openml_rawds/puma32H.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'theta2' ] - df[ 'theta1' ])",
            "dataset": "/data/openml_rawds/puma32H.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'name' ] + df[ 'utterance' ])",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (\": \" + df[ 'name' ] + df[ 'utterance' ])",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'total_bedrooms' ] / df[ 'total_rooms' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'total_rooms' ] / df[ 'population' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: (df[ 'total_rooms' ] / df[ 'households' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: (df[ 'total_bedrooms' ] / df[ 'households' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: (df[ 'population' ] / df[ 'households' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (\"/kaggle/input/english-handwritten-characters-dataset/\" + df[ 'at' ].at({\"0\":473,\"1\":\"image\"}))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (\"/kaggle/input/english-handwritten-characters-dataset/\" + df[ 'at' ].at({\"0\":2387,\"1\":\"image\"}))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (\"_mask.png\" + df[ 'stem' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (3 * df[ 's5' ])",
            "dataset": "/data/openml_rawds/pokerhand.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'mass' ] - df[ 'mass' ].mean())",
            "dataset": "/data/openml_rawds/diabetes.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'concave_points_worst' ] * df[ 'symmetry_worst' ] * df[ 'texture_worst' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'concave_points_worst' ] * df[ 'radius_worst' ] * df[ 'symmetry_worst' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: (df[ 'concave_points_worst' ] * df[ 'smoothness_worst' ] * df[ 'symmetry_worst' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (numpy.array(df[ 'alcohol' ]) + numpy.array(df[ 'malic_acid' ]))",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (numpy.array(df[ 'alcohol' ]) * numpy.array(df[ 'malic_acid' ]))",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'f5' ] / df[ 'f5' ].std())",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'f5' ].mean() / df[ 'f5' ].std())",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'f5' ] - df[ 'f5' ].mean())",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'f34' ] / df[ 'f80' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: (df[ 'f34' ] * df[ 'f8' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'f92' ] / df[ 'f73' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'f90' ] / df[ 'f74' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: (df[ 'f17' ] - df[ 'f15' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: (df[ 'f14' ] / df[ 'f26' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: (df[ 'f32' ] / df[ 'f35' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_35",
            "code": "lambda df: (df[ 'f34' ] * df[ 'f41' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_38",
            "code": "lambda df: (df[ 'f46' ] / df[ 'f66' ])",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'NOC_athletes' ] / df[ 'NOC_coaches' ])",
            "dataset": "/data/openml_rawds/analcatdata_olympic2000.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (UNKNOWN + df[ 'ys' ])",
            "dataset": "/data/openml_rawds/prnn_synth.csv"
        },
        {
            "expr": "expr_41",
            "code": "lambda df: (df[ 'f55' ] / df[ 'f34' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_42",
            "code": "lambda df: (df[ 'f66' ] / df[ 'f69' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_43",
            "code": "lambda df: (2 + df[ 'f66' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_45",
            "code": "lambda df: (df[ 'f96' ] / df[ 'f69' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_47",
            "code": "lambda df: (df[ 'f96' ] / df[ 'f77' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_48",
            "code": "lambda df: (df[ 'f55' ] + df[ 'f90' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_49",
            "code": "lambda df: (df[ 'f25' ] * df[ 'f96' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_50",
            "code": "lambda df: (df[ 'f69' ] / df[ 'f96' ])",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'private' ] - df[ 'public' ])",
            "dataset": "/data/openml_rawds/sleuth_case1201.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'cap-color' ] + df[ 'cap-surface' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'cap-color' ] + df[ 'cap-shape' ] + df[ 'cap-surface' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'cap-color' ] + df[ 'cap-shape' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'stalk-color-above-ring' ] + df[ 'stalk-color-below-ring' ] + df[ 'stalk-shape' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: (df[ 'stalk-color-above-ring' ] + df[ 'stalk-color-below-ring' ] + df[ 'stalk-surface-below-ring' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: (df[ 'stalk-color-above-ring' ] + df[ 'stalk-color-below-ring' ])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'disease_type' ].value_counts() / 100)",
            "dataset": "/data/openml_rawds/kidney.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (6 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (10 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (2 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (4 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (7 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (9 + df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'map_winner' ] - 1)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (100 * df[ 'total_confirmed_cases' ])",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'total_confirmed_cases' ] / df[ 'swabs_made' ])",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'new_total_deaths' ] / df[ 'new_confirmed_cases' ])",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'total_cases' ].max() / 200)",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (100 * df[ 'swabs_made' ])",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'Description' ] + df[ 'Short description' ])",
            "dataset": "/data/kaggle-11k/data/csvs/imdb-movie-19722019.zip_imdb_1972-2019.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (\" \" + df[ 'Description' ] + df[ 'Short description' ])",
            "dataset": "/data/kaggle-11k/data/csvs/imdb-movie-19722019.zip_imdb_1972-2019.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'number_of_reviews' ] / df[ 'reviews_per_month' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (\"result accuracy: %f\" % (df[ 'Correct Result' ].sum() / df[ 'Correct Result' ].count()))",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (\"result accuracy: %f\" % df[ 'Correct Result' ].sum())",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (\"result accuracy: %f\" % df[ 'Correct Result' ].count())",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'day_from_jan_first' ] - df[ 'day_from_jan_first' ].min())",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (\"../input/humpback-whale-identification/test/\" + df[ 'image' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (\"../input/humpback-whale-identification/train/\" + df[ 'image' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (pandas.to_datetime(\"now\") - df[ 'dob' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'dob' ] / numpy.timedelta64(1, \"Y\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (\" to \" + \"The dataset covers races from \" + df[ 'race_date' ].max())",
            "dataset": "/data/kaggle-11k/data/csvs/formula-e-championship.zip_formula_e_race_results.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (\" to \" + df[ 'race_date' ].max() + df[ 'race_date' ].min())",
            "dataset": "/data/kaggle-11k/data/csvs/formula-e-championship.zip_formula_e_race_results.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (\"The dataset covers races from \" + df[ 'race_date' ].max() + df[ 'race_date' ].min())",
            "dataset": "/data/kaggle-11k/data/csvs/formula-e-championship.zip_formula_e_race_results.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (100 * max(df[ 'event_name' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (100 * df[ 'event_name' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'event_name' ] / max(df[ 'event_name' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'kills' ] / df[ 'walkDistance' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'killStreaks' ] / df[ 'kills' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'assists' ].value_counts() / 38)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'assists' ].value_counts() / 14)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'sp_attack' ].sum() / 3)",
            "dataset": "/data/kaggle-11k/data/csvs/cleanedpokemon.zip_pokemon_clean.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (2 + df[ 'height_m' ])",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'weight_kg' ] / df[ 'height_m' ])",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (10000 * df[ 'weight_kg' ])",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (100 * df[ 'total_tests' ])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_33",
            "code": "lambda df: (df[ 'female_smokers' ] + df[ 'male_smokers' ])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_34",
            "code": "lambda df: (100 * df[ 'hospital_beds_per_thousand' ])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_35",
            "code": "lambda df: (100 * 1000 * df[ 'hospital_beds_per_thousand' ])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'deaths' ] / df[ 'confirmed_cases' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-challenges.zip_governmentresponse.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: (max(df[ 'created_at' ]) - df[ 'user_join_date' ])",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'odometer' ] / 5000)",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (10000 * df[ 'height_cm' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: (df[ 'overall' ] - df[ 'Overall' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_33",
            "code": "lambda df: (df[ 'potential_value' ] - df[ 'value_eur' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_49",
            "code": "lambda df: (df[ 'contract_valid_until' ] - df[ 'joined_yr' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_58",
            "code": "lambda df: (df[ 'mentality_vision' ] / df[ 'mentality_vision' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_77",
            "code": "lambda df: (df[ 'cb' ] + df[ 'lgb' ] + df[ 'xgb' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_78",
            "code": "lambda df: (df[ 'cb' ] + df[ 'xgb' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_79",
            "code": "lambda df: (df[ 'cb' ] + df[ 'lgb' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_80",
            "code": "lambda df: (df[ 'cb' ] + df[ 'lgbm' ] + df[ 'xgb' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "Boolean Expressions": [
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'mode' ] == 0)",
            "dataset": "/data/openml_rawds/nasa_numeric.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'mode' ] == 1)",
            "dataset": "/data/openml_rawds/nasa_numeric.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'turn' ] == 3)",
            "dataset": "/data/openml_rawds/nasa_numeric.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'lenght' ] > 10)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'lenght' ] > 100)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'eccen' ] < 300)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'mean_tr' ] < 4000)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'blackand' ] < 30000)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'wb_trans' ] < 2000)",
            "dataset": "/data/openml_rawds/BNG(page-blocks,nominal,295245).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'trestbps' ] > 120)",
            "dataset": "/data/openml_rawds/BNG(heart-h,nominal,1000000).csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: (df[ 'oldpeak' ] < 4)",
            "dataset": "/data/openml_rawds/BNG(heart-h,nominal,1000000).csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: (df[ 'oldpeak' ] > 1)",
            "dataset": "/data/openml_rawds/BNG(heart-h,nominal,1000000).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (numpy.abs(df[ 'normalized-losses' ]) > (3 * df[ 'normalized-losses' ].std()))",
            "dataset": "/data/openml_rawds/autos.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'season' ] == 2019)",
            "dataset": "/data/openml_rawds/kdd_coil_2.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'workclass' ] != \"?\")",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'education' ] == \" Bachelors\")",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'education' ] == \" HS-grad\")",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'occupation' ] != \"?\")",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'duration' ] > 0)",
            "dataset": "/data/openml_rawds/credit-g.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'condition_count' ] > 0)",
            "dataset": "/data/openml_rawds/ar4.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'period' ] == \"year\")",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'period' ] == \"quarter\")",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: ((df[ 'x5' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: ((df[ 'x4' ] + df[ 'x5' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: ((df[ 'x4' ] + df[ 'x5' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: ((df[ 'x3' ] + df[ 'x4' ] + df[ 'x5' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: ((df[ 'x1' ] + df[ 'x3' ] + df[ 'x5' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'x6' ] > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: ((df[ 'x3' ] + df[ 'x4' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: ((df[ 'x1' ] + df[ 'x3' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: ((df[ 'x2' ] + df[ 'x3' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: ((df[ 'x1' ] + df[ 'x2' ] + df[ 'x6' ]) > 4)",
            "dataset": "/data/openml_rawds/BNG(mv).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'd' ] >= 710)",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'sales' ] == 0)",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'date_block_num' ] == 33)",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'A' ] > 0)",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: (df[ 'B' ] > 1)",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'treat' ] > 0)",
            "dataset": "/data/openml_rawds/sleuth_case1102.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'goal' ] < 5000)",
            "dataset": "/data/openml_rawds/BNG(Ailerons).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'platelets' ] >= 303500)",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'platelets' ] <= 212500)",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'motor' ] == \"E\")",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'pgain' ] == 4)",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'vgain' ] == 5)",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'country_code' ] == \"US\")",
            "dataset": "/data/openml_rawds/strikes.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'unemployment' ] > 8.5)",
            "dataset": "/data/openml_rawds/strikes.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'winner' ] == \"Black\")",
            "dataset": "/data/openml_rawds/analcatdata_boxing1.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'skin' ] == 0)",
            "dataset": "/data/openml_rawds/BNG(primary-tumor).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'speaker' ] == \"Chris Wallace\")",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'flag' ] == \"TEST\")",
            "dataset": "/data/openml_rawds/KDDCup99.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'flag' ] == \"TRAIN\")",
            "dataset": "/data/openml_rawds/KDDCup99.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'flag' ] == \"test\")",
            "dataset": "/data/openml_rawds/KDDCup99.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'flag' ] == \"train\")",
            "dataset": "/data/openml_rawds/KDDCup99.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'league' ] == \"TCL\")",
            "dataset": "/data/openml_rawds/baseball-team.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'show' ] == 0)",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'show' ] == 1)",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'median_house_value' ] < 500000)",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'activity' ] == 0)",
            "dataset": "/data/openml_rawds/BNG(solar-flare).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'itching' ] < 120)",
            "dataset": "/data/openml_rawds/dermatology.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'an' ] == 16)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'any' ] == 0)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'any' ] == 1)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'less' ] > df[ 'more' ])",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'one' ] > 0)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'which' ] == 0)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'which' ] == 1)",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'which' ] == \"valid\")",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'aquatic' ] == \"n\")",
            "dataset": "/data/openml_rawds/BNG(zoo,nominal,1000000).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'legs' ] == 5)",
            "dataset": "/data/openml_rawds/BNG(zoo,nominal,1000000).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'legs' ] > 0)",
            "dataset": "/data/openml_rawds/BNG(zoo,nominal,1000000).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'input1' ] == 0)",
            "dataset": "/data/openml_rawds/BNG(pendigits,nominal,1000000).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'input2' ] < 50)",
            "dataset": "/data/openml_rawds/BNG(pendigits,nominal,1000000).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 's5' ] == 14.62)",
            "dataset": "/data/openml_rawds/pokerhand.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'plas' ] == 0)",
            "dataset": "/data/openml_rawds/diabetes.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'pres' ] == 0)",
            "dataset": "/data/openml_rawds/diabetes.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'radius_mean' ] > 17)",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'radius_mean' ] < 15)",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'perimeter_worst' ] > 110)",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'total.sulfur.dioxide' ] >= 0)",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (numpy.bincount(df[ 'quality' ]) > 0)",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'A-coref' ] == False)",
            "dataset": "/data/openml_rawds/boston_corrected.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'B-coref' ] == True)",
            "dataset": "/data/openml_rawds/boston_corrected.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'A-coref' ] == True)",
            "dataset": "/data/openml_rawds/boston_corrected.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'treatment' ] >= 0)",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'treatment' ] <= 0)",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'celltype' ] == \"U2OS\")",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'celltype' ] == \"RPE\")",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'celltype' ] == \"HEPG2\")",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'celltype' ] == \"HUVEC\")",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'f2' ] == 1)",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'f2' ] == 0)",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'f4' ] == \"INFP\")",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'f4' ] == \"ENFJ\")",
            "dataset": "/data/openml_rawds/pol.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'children' ] == 4)",
            "dataset": "/data/openml_rawds/nursery.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'language' ] == \"tamil\")",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'language' ] == \"hindi\")",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'class1' ] == \"No Lung Opacity / Not Normal\")",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'public' ] <= 0.7488)",
            "dataset": "/data/openml_rawds/sleuth_case1201.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'target' ] >= 0.5)",
            "dataset": "/data/openml_rawds/schizo.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'odor' ] == \"n\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'gill-attachment' ] != \"f\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'gill-spacing' ] != \"c\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'gill-size' ] != \"n\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'gill-size' ] != \"b\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'gill-color' ] == \"b\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'stalk-root' ] == \"?\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: (df[ 'stalk-root' ] != \"?\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: (df[ 'ring-number' ] == \"n\")",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'Country or region' ] == \"Central African Republic\")",
            "dataset": "/data/openml_rawds/analcatdata_bondrate.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'range' ] == \"group1\")",
            "dataset": "/data/openml_rawds/Acorns.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'party' ] == \"Indian National Congress\")",
            "dataset": "/data/openml_rawds/analcatdata_neavote.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'ae' ] < 110)",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'family' ] == \"BREAD/BAKERY\")",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'map_winner' ] == 2)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'rank_1' ] < 30)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'engine_power' ] != 58)",
            "dataset": "/data/kaggle-11k/data/csvs/another-fiat-500-dataset-1538-rows.zip_automobile_dot_it_used_fiat_500_in_Italy_dataset_filtered.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'age_in_days' ] > 28000)",
            "dataset": "/data/kaggle-11k/data/csvs/another-fiat-500-dataset-1538-rows.zip_automobile_dot_it_used_fiat_500_in_Italy_dataset_filtered.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'age_in_days' ] <= 28000)",
            "dataset": "/data/kaggle-11k/data/csvs/another-fiat-500-dataset-1538-rows.zip_automobile_dot_it_used_fiat_500_in_Italy_dataset_filtered.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ '0' ] == \"thesecretoftheplanetoftheapesworkingtitleescapefromtheplanetoftheapesreleasetitlepart1\")",
            "dataset": "/data/kaggle-11k/data/csvs/imdb-movie-19722019.zip_imdb_1972-2019.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'log_number_of_reviews' ] > 8.56)",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: (df[ 'love' ] == 1)",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'username' ] == \"JoeBiden\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'username' ] == \"realDonaldTrump\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'username' ] != \"kerneler\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: (df[ 'hashtags' ] != \"No HashTag\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: (df[ 'source' ] == \"critical illness insurance\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: (df[ 'source' ] == \"life insurance\")",
            "dataset": "/data/kaggle-11k/data/csvs/tweets-about-the-upcoming-us-electionaugtooct.zip_election2020.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'gl' ] == \"us\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'offer completed' ] != 1)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: (df[ 'twitter' ] != \"null\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: (df[ 'author' ] == \"C.S. Lewis\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: (df[ 'author' ] == \"EAP\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_34",
            "code": "lambda df: (df[ 'locale' ] == \"Town\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_39",
            "code": "lambda df: (df[ 'version' ] == \"gate_40\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_40",
            "code": "lambda df: (df[ 'version' ] == \"gate_30\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_43",
            "code": "lambda df: (df[ 'modelyear' ] >= 80)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_47",
            "code": "lambda df: (df[ 'manufacturer' ] == \"merc\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_49",
            "code": "lambda df: (df[ 'manufacturer' ] == \"chevrolet\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_55",
            "code": "lambda df: (df[ 'section counts' ] > 20)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_57",
            "code": "lambda df: (df[ 'creator' ] == \"DC Comics\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_59",
            "code": "lambda df: (df[ 'creator' ] == \"Marvel Comics\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'amt' ] <= 1500)",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'verified' ] == 1)",
            "dataset": "/data/kaggle-11k/data/csvs/dating-app-lovoo-user-profiles.zip_lovoo_v3_users_api-results.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'adr' ] < 500)",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'title_bout' ] == True)",
            "dataset": "/data/kaggle-11k/data/csvs/ultimate-ufc-dataset.zip_ufc-master.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'no_of_rounds' ] == 5)",
            "dataset": "/data/kaggle-11k/data/csvs/ultimate-ufc-dataset.zip_ufc-master.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'no_of_rounds' ] == 3)",
            "dataset": "/data/kaggle-11k/data/csvs/ultimate-ufc-dataset.zip_ufc-master.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'better_rank' ] == \"Red\")",
            "dataset": "/data/kaggle-11k/data/csvs/ultimate-ufc-dataset.zip_ufc-master.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'finish_details' ] != 0)",
            "dataset": "/data/kaggle-11k/data/csvs/ultimate-ufc-dataset.zip_ufc-master.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'continent' ] == \"other\")",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-indonesia.zip_covid_19_indonesia_time_series_all.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'manner_of_death' ] == \"shot\")",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: (df[ 'body_camera' ] == True)",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: (df[ 'body_camera' ] == False)",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'type1' ] == \"flying\")",
            "dataset": "/data/kaggle-11k/data/csvs/cleanedpokemon.zip_pokemon_clean.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'type2' ] == \"flying\")",
            "dataset": "/data/kaggle-11k/data/csvs/cleanedpokemon.zip_pokemon_clean.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'is_legendary' ] == 0)",
            "dataset": "/data/kaggle-11k/data/csvs/cleanedpokemon.zip_pokemon_clean.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'is_legendary' ] == 1)",
            "dataset": "/data/kaggle-11k/data/csvs/cleanedpokemon.zip_pokemon_clean.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'discount' ] == 1)",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'discount' ] == 4)",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'discount' ] == 5)",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'is_new' ] == False)",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'original_publication_year' ] == 2005)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'original_publication_year' ] == 2009)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'original_publication_year' ] == 2004)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'average_rating' ] > 3)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'height_m' ] < 20)",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'total_points' ] != 0)",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'new_deaths_smoothed_per_million' ] < 0)",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: (df[ 'median_age' ] < 35.5)",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: (df[ 'median_age' ] < 38.5)",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'manufacture_year' ] >= 1970)",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'columns' ] != \"body_type\")",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'seat_count' ] < 6)",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'seat_count' ] >= 6)",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: (df[ 'fuel_type' ] == \"Recorded\")",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'denominator' ] == df[ 'auth_new_sum' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'loser_name' ] == \"Roger Federer\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'loser_rank' ] <= 100)",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'round' ] == 2)",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'tourney_level' ] == \"G\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'tourney_name' ] == \"Hamburg\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'tourney_name' ] == \"Queen's Club\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'winner_name' ] == \"Roger Federer\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'winner_name' ] != \"Roger Federer\")",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'accommodates' ] == 2)",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'likes' ] > 50000)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'dislikes' ] < 1000)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'likes' ] > 100000)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: (df[ 'user_location' ] == \"South Africa\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: (df[ 'user_location' ] == \"United Kingdom\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: (df[ 'user_location' ] == \"Switzerland\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: (df[ 'user_location' ] == \"Canada\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: (df[ 'user_location' ] == \"India\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: (df[ 'user_location' ] == \"London\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: (df[ 'user_location' ] == \"United States\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_40",
            "code": "lambda df: (df[ 'state_code' ] != df[ 'state_code.1' ])",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'short_name' ] == \"Cristiano Ronaldo\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: (df[ 'club_name' ] == \"Real Madrid\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: (df[ 'league_name' ] == \"German 1. Bundesliga\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_40",
            "code": "lambda df: (df[ 'international_reputation' ] == 4)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_42",
            "code": "lambda df: (df[ 'weak_foot' ] == 5)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_43",
            "code": "lambda df: (df[ 'skill_moves' ] == 5)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_44",
            "code": "lambda df: (df[ 'skill_moves' ] == 4)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_50",
            "code": "lambda df: (df[ 'dribbling' ] > 90)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_52",
            "code": "lambda df: (df[ 'gk_reflexes' ] > 75)",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_55",
            "code": "lambda df: (df[ 'movement_reactions' ] == df[ 'movement_reactions' ].max())",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'district' ] == \"Gangnam-gu\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-house-cook-ratings-election-results-20022018.zip_2002-2018_house_election_ratings_results.csv"
        }
    ],
    "isin": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'projectname' ].isin({\"0\":\"1 spring-framework\",\"1\":\"4 lucene-solr-master\",\"2\":\"7 hadoop-trunk\",\"3\":\"9 skywalking-master\",\"4\":\"10 Signal-Android-master\"})",
            "dataset": "/data/openml_rawds/nasa_numeric.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'projectname' ].isin({\"0\":\"2 junit-5\",\"1\":\"3 kafka-trunk\",\"2\":\"5 dropwizard-master\",\"3\":\"9 skywalking-master\",\"4\":\"10 Signal-Android-master\"})",
            "dataset": "/data/openml_rawds/nasa_numeric.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'season' ].isin({\"0\":2018,\"1\":2019})",
            "dataset": "/data/kaggle-11k/data/csvs/formula-e-championship.zip_formula_e_race_results.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'peripheral_pulse' ].isin({\"0\":\"reduced\",\"1\":\"absent\"})",
            "dataset": "/data/openml_rawds/colic.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'molecule_name' ].isin(df[ 'molecule_name' ].unique())",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: df[ 'spore-print-color' ].isin({\"0\":\"w\"})",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'player_id' ].isin({\"0\":\"bondsba01\",\"1\":\"mcgwima01\",\"2\":\"sheffga01\",\"3\":\"palmera01\",\"4\":\"sosasa01\",\"5\":\"rosepe01\"})",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'pokedex_number' ].isin({\"0\":252,\"1\":253,\"2\":254,\"3\":255,\"4\":256,\"5\":257,\"6\":258,\"7\":259,\"8\":260})",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'short_name' ].isin({\"0\":\"L. Messi\",\"1\":\"Cristiano Ronaldo\",\"2\":\"R. Lewandowski\",\"3\":\"K. De Bruyne\"})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'club_name' ].isin({\"0\":\"FC Barcelona\",\"1\":\"Tottenham Hotspur\",\"2\":\"Paris Saint-Germain\",\"3\":\"Chelsea\",\"4\":\"Manchester City\",\"5\":\"Manchester United\",\"6\":\"Arsenal\",\"7\":\"Liverpool\",\"8\":\"Real Madrid\",\"9\":\"Bayern Munich\"})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: df[ 'club_name' ].isin({\"0\":\"FC Barcelona\",\"1\":\"Juventus\",\"2\":\"Paris Saint-Germain\",\"3\":\"Chelsea\",\"4\":\"Manchester City\"})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "value_counts": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'sex' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/dpic-execution-data-1976-2020.zip_DPIC Execution Database Cleaned.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: df[ 'slope' ].value_counts()",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'drive-wheels' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'engine-location' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'fuel-system' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'zip' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/campaign-contributions-19902016.zip_individual_contributions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'race' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/dpic-execution-data-1976-2020.zip_DPIC Execution Database Cleaned.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'workclass' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'fruit' ].value_counts()",
            "dataset": "/data/openml_rawds/squash-unstored.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'Q4' ].value_counts()",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'savings_status' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(credit-g,nominal,1000000).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'company1' ].value_counts()",
            "dataset": "/data/openml_rawds/stock.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'cylinders' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'Type' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(glass).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'label' ].value_counts()",
            "dataset": "/data/openml_rawds/eye_movements.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'pregnant' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'x34' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(waveform-5000,nominal,1000000).csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: df[ 'x35' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(waveform-5000,nominal,1000000).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'flag' ].value_counts()",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'is_host_login' ].value_counts()",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'show' ].value_counts(normalize=True)",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'total_bedrooms' ].value_counts()",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'itching' ].value_counts()",
            "dataset": "/data/openml_rawds/BNG(dermatology,nominal,1000000).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'lip' ].value_counts()",
            "dataset": "/data/openml_rawds/ecoli.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'subject' ].value_counts()",
            "dataset": "/data/openml_rawds/analcatdata_apnea2.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'class2' ].value_counts()",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'cap-shape' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'cap-color' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'odor' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: df[ 'stalk-root' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: df[ 'veil-type' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: df[ 'habitat' ].value_counts()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'buying' ].value_counts(normalize=True)",
            "dataset": "/data/openml_rawds/car.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'disease_type' ].value_counts()",
            "dataset": "/data/openml_rawds/kidney.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'user_id' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: pandas.value_counts(df[ 'match_winner' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'engine_power' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'category' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/dataco-smart-supply-chain-for-big-data-analysis.zip_tokenized_access_logs.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'ethnicity' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/linkedin-profile-data.zip_LinkedIn Profile Data.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'toss_decision' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'result' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'player_of_match' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: pandas.value_counts(df[ 'player_of_match' ])",
            "dataset": "/data/kaggle-11k/data/csvs/ipl-dataset-2020-season-included.zip_match_data.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'timezone' ].value_counts(dropna=True)",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: df[ 'mentions' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'one_click_vendor' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'organization' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'website' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: df[ 'author' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: df[ 'locale' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'manufacturer' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        },
        {
            "expr": "expr_56",
            "code": "lambda df: df[ 'section' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_58",
            "code": "lambda df: df[ 'creator' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'verified' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_customers.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'assists' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'weight_class' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/ufcdata.zip_data.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'armed or not' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'flee' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'n_abilities' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'moves' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-database-by-pokeapico.zip_pokemon.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'subcategory' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: df[ 'aged_65_older' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: df[ 'aged_70_older' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: df[ 'diabetes_prevalence' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'classfication' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'maker' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'room_type' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'bedrooms' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'user_screen_name' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: df[ 'user_description' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_38",
            "code": "lambda df: df[ 'preferred_foot' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_41",
            "code": "lambda df: df[ 'international_reputation' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_48",
            "code": "lambda df: df[ 'loaned_from' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_70",
            "code": "lambda df: df[ 'cam' ].value_counts()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "head": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'sex' ].head()",
            "dataset": "/data/kaggle-11k/data/csvs/dpic-execution-data-1976-2020.zip_DPIC Execution Database Cleaned.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'median_house_value' ].sort_values(ascending=False).head(10)",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'median_income' ].sort_values(ascending=False).head(10)",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'hair' ].head(10)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'f2' ].head(20)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'f5' ].sort_values(ascending=False).head(7)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'f10' ].head()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'class2' ].value_counts().to_frame().head(10)",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'ethnicity' ].value_counts().sort_values(ascending=False).head(10)",
            "dataset": "/data/kaggle-11k/data/csvs/linkedin-profile-data.zip_LinkedIn Profile Data.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'created_at' ].head()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'timezone' ].value_counts(dropna=True).head(10)",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: df[ 'link' ].sort_values(ascending=False).head(3)",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'url' ].head(12)",
            "dataset": "/data/kaggle-11k/data/csvs/dataco-smart-supply-chain-for-big-data-analysis.zip_tokenized_access_logs.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: df[ 'ratings_count' ].sum().reset_index().sort_values(\"ratings_count\", ascending=False).head()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: df[ 'tag_name' ].head(10000)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: df[ 'user_description' ].value_counts().head(15)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        }
    ],
    "cut": [
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.cut(df[ 'Age' ], labels={\"0\":\"Toddler\",\"1\":\"Child\",\"2\":\"Teenagers\",\"3\":\"Adult\",\"4\":\"Elderly\"}, bins={\"0\":0,\"1\":5,\"2\":10,\"3\":17,\"4\":60,\"5\":99})",
            "dataset": "/data/kaggle-11k/data/csvs/data-files-used-for-models.zip_HR_attrition_orig_proc.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: pandas.cut(df[ 'age' ], bins={\"0\":0,\"1\":40,\"2\":50,\"3\":60,\"4\":70,\"5\":100})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.cut(df[ 'resting_blood_pressure' ], {\"0\":0,\"1\":120,\"2\":140}, labels={\"0\":0,\"1\":1,\"2\":2}, bins={\"0\":0,\"1\":120,\"2\":140})",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: pandas.cut(df[ 'f10' ], labels={\"0\":\"A\",\"1\":\"B\",\"2\":\"C\",\"3\":\"D\"}, bins={\"0\":0,\"1\":0.1,\"2\":0.2,\"3\":0.3,\"4\":1})",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: pandas.cut(df[ 'f14' ], labels=False, bins=10)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: pandas.cut(df[ 'f14' ], labels=False, bins=20)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: pandas.cut(df[ 'f14' ], labels=False, bins=50)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_42",
            "code": "lambda df: pandas.cut(df[ 'f68' ], labels={\"0\":\"A\",\"1\":\"B\",\"2\":\"C\"}, bins={\"0\":0,\"1\":0.1,\"2\":0.3,\"3\":1})",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.cut(df[ 'tenure' ], labels={\"0\":\"0-12\",\"1\":\"13-24\",\"2\":\"25-36\",\"3\":\"37-48\",\"4\":\"49-60\",\"5\":\"61-72\"}, bins={\"0\":0,\"1\":12,\"2\":24,\"3\":36,\"4\":48,\"5\":60,\"6\":72})",
            "dataset": "/data/kaggle-11k/data/csvs/customer-churn.zip_CHURN.csv"
        }
    ],
    "astype": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'menopause' ].astype(\"category\")",
            "dataset": "/data/openml_rawds/BNG(breastTumor).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'breast' ].astype(\"category\")",
            "dataset": "/data/openml_rawds/BNG(breastTumor).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'breast_quad' ].astype(\"category\")",
            "dataset": "/data/openml_rawds/BNG(breastTumor).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'irradiat' ].astype(\"category\")",
            "dataset": "/data/openml_rawds/breast-cancer.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: df[ 'thal' ].as_matrix().astype(\"float\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'exercise_induced_angina' ].astype(\"object\")",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'symboling' ].astype(\"object\")",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'p4' ].to_numpy().astype(df[ 'int16' ])",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: df[ 'stalk-root' ].astype(object)",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'region_code' ].astype(\"str\")",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: pandas.DataFrame(df[ 'log_number_of_reviews' ]).astype(\"float64\")",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: pandas.DataFrame((df[ 'log_number_of_reviews' ] > 8.56)).astype(\"float64\")",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: pandas.isna(df[ 'number_of_reviews' ]).astype(\"float64\")",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'pct_black/hispanic' ].astype(float)",
            "dataset": "/data/kaggle-11k/data/csvs/linkedin-profile-data.zip_LinkedIn Profile Data.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'customer_id' ].astype(\"int64\")",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'is_open' ].astype(bool)",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'title_bout' ].astype(float)",
            "dataset": "/data/kaggle-11k/data/csvs/ufcdata.zip_data.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: df[ 'growth_rate' ].astype(float)",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'life_expectancy' ].astype(float)",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        }
    ],
    "logical_and": [
        {
            "expr": "expr_8",
            "code": "lambda df: numpy.logical_and(df[ 'trestbps' ], df[ 'age' ])",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: numpy.logical_and(df[ 'trestbps' ], (df[ 'age' ] > 70))",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: numpy.logical_and((df[ 'trestbps' ] > 120), df[ 'age' ])",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: numpy.logical_and((df[ 'trestbps' ] > 120), (df[ 'age' ] > 70))",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: numpy.logical_and(df[ 'area_mean' ], df[ 'area_worst' ])",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: numpy.logical_and(df[ 'area_mean' ], (df[ 'area_worst' ] < 350))",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: numpy.logical_and(df[ 'likes' ], df[ 'dislikes' ])",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: numpy.logical_and(df[ 'likes' ], (df[ 'dislikes' ] < 1000))",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: numpy.logical_and((df[ 'likes' ] > 100000), df[ 'dislikes' ])",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        }
    ],
    "sample": [
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'chol' ].sample(n=20, replace=True)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'chol' ].sample(n=30, replace=True)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'chol' ].sample(n=60, replace=True)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'chol' ].sample(n=500, replace=True)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_34",
            "code": "lambda df: df[ 'f35' ].sample(10000)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_36",
            "code": "lambda df: df[ 'f44' ].sample(10000)",
            "dataset": "/data/openml_rawds/isolet.csv"
        }
    ],
    "mean": [
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'chol' ].mean()",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'bore' ].mean()",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'peak-rpm' ].mean()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'capital_run_length_average' ].mean()",
            "dataset": "/data/openml_rawds/spambase.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: (2 + df[ 'values' ]).mean()",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'albumin' ].mean()",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'sgot' ].mean()",
            "dataset": "/data/openml_rawds/liver-disorders.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'hot' ].mean()",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'total_bedrooms' ].mean()",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'radius_mean' ].mean()",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'area_mean' ].mean()",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'f5' ].mean()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'len' ].mean()",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'overcrowding' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'adr' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'average_rating' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'new_tests_smoothed_per_thousand' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: df[ 'gdp_per_capita' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'winner_ht' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_47",
            "code": "lambda df: df[ 'release_clause_eur' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_51",
            "code": "lambda df: df[ 'physic' ].mean()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "map": [
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'fbs' ].map({\"0\":\"false\",\"1\":\"true\"})",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'fbs>120' ].map({\"true\":1,\"false\":0})",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'fuel-system' ].map(df[ 'fuel-system' ].value_counts().to_dict())",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: df[ 'relationship' ].map({\"siblings\":4,\"parentOf\":8,\"killedBy\":2,\"married\":4})",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'relationship' ].map({\"siblings\":\"green\",\"parentOf\":\"blue\",\"killedBy\":\"magenta\",\"married\":\"red\"})",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'hypopituitary' ].map({\"t\":1,\"f\":0})",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'psych' ].map({\"t\":1,\"f\":0})",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'thyroid_surgery' ].map({\"t\":1,\"f\":0})",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'query_hypothyroid' ].map({\"t\":1,\"f\":0})",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'query_hyperthyroid' ].map({\"t\":1,\"f\":0})",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'month' ].map({\"Julho\":7,\"Junho\":6,\"Outubro\":10,\"Abril\":4,\"Janeiro\":1,\"Dezembro\":12,\"Mar\u00e7o\":3,\"Fevereiro\":2,\"Maio\":5,\"Setembro\":9,\"Agosto\":8,\"Novembro\":11})",
            "dataset": "/data/kaggle-11k/data/csvs/indian-card-payment-data-set.zip_rbi_payment_data_as_on_aug_2019.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'month' ].map({\"Julho\":\"July\",\"Junho\":\"June\",\"Outubro\":\"October\",\"Abril\":\"April\",\"Janeiro\":\"January\",\"Dezembro\":\"December\",\"Mar\u00e7o\":\"March\",\"Fevereiro\":\"February\",\"Maio\":\"May\",\"Setembro\":\"September\",\"Agosto\":\"August\",\"Novembro\":\"November\"})",
            "dataset": "/data/kaggle-11k/data/csvs/indian-card-payment-data-set.zip_rbi_payment_data_as_on_aug_2019.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'treatment' ].map({\"Discount\":1,\"Buy One Get One\":-1,\"No Offer\":0})",
            "dataset": "/data/openml_rawds/veteran.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'icon' ].map({\" cloudy \":2,\" fog \":3,\" rain \":6,\" clear-day \":0,\" partly-cloudy-night \":5,\" clear-night \":1,\" partly-cloudy-day \":4})",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'slp' ].map({\"0\":\"downsloping\",\"1\":\"flat\",\"2\":\"upsloping\"})",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'slp' ].map({\"0\":\"Upsloping\",\"1\":\"Flat\",\"2\":\"Downsloping\"})",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        }
    ],
    "replace": [
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'restecg' ].replace(0, \"left ventricular hypertrophy\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: df[ 'restecg' ].replace(2, \"T/ST abnormalities\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'restecg' ].replace(1, \"normal\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'num-of-doors' ].replace(\"?\", \"four\")",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'num-of-cylinders' ].replace({\"six\":6,\"four\":4,\"twelve\":12,\"two\":2,\"three\":3,\"five\":5,\"eight\":8})",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'marital-status' ].replace({\"0\":\" Divorced\",\"1\":\" Married-spouse-absent\",\"2\":\" Never-married\",\"3\":\" Separated\",\"4\":\" Widowed\"}, \"Single\")",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'marital-status' ].replace({\"0\":\" Married-AF-spouse\",\"1\":\" Married-civ-spouse\"}, \"Couple\")",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'flavour' ].replace({\"0\":\"-\"}, df[ 'nan' ])",
            "dataset": "/data/openml_rawds/squash-unstored.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'credit_history' ].replace(df[ 'nan' ], 1)",
            "dataset": "/data/openml_rawds/BNG(credit-g,nominal,1000000).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'albumin' ].replace(df[ 'nan' ], df[ 'albumin' ].mean())",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'sgot' ].replace(df[ 'nan' ], df[ 'sgot' ].mean())",
            "dataset": "/data/openml_rawds/liver-disorders.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'animal' ].replace(to_replace=\"not acept\", value=0)",
            "dataset": "/data/openml_rawds/BNG(zoo,nominal,1000000).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'animal' ].replace(to_replace=\"acept\", value=1)",
            "dataset": "/data/openml_rawds/BNG(zoo,nominal,1000000).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'str' ].replace(\"No\", \"No hair (not bald)\")",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'str' ].replace(\"New England\", \"Boston\")",
            "dataset": "/data/openml_rawds/USCrime.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'condition' ].replace({\"0\":\"Not present\",\"1\":\"Present\"})",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        },
        {
            "expr": "expr_37",
            "code": "lambda df: df[ 'preferred_foot' ].replace({\"left\":0,\"right\":1})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "get_dummies": [
        {
            "expr": "expr_23",
            "code": "lambda df: pandas.get_dummies(df[ 'restecg' ])",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_32",
            "code": "lambda df: pandas.get_dummies(df[ 'thal' ], prefix=\"thal\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: pandas.get_dummies(df[ 'aspiration' ])",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: pandas.get_dummies(df[ 'purpose' ], drop_first=True)",
            "dataset": "/data/openml_rawds/BNG(credit-g,nominal,1000000).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.get_dummies(df[ 'chest_bin' ], prefix=\"chest_bin\")",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: pandas.get_dummies(df[ 'resting_electrocardiographic_results' ], prefix=\"resting_electrocardiographic_results\")",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: pandas.get_dummies(df[ 'number_of_major_vessels' ], prefix=\"number_of_major_vessels\")",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.get_dummies(df[ 'treat' ], prefix=\"treat\")",
            "dataset": "/data/openml_rawds/sleuth_case1102.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.get_dummies(df[ 'cp' ], drop_first=True)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: pandas.get_dummies(df[ 'offer' ], drop_first=True)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "countplot": [
        {
            "expr": "expr_24",
            "code": "lambda df: seaborn.countplot(df[ 'exang' ])",
            "dataset": "/data/openml_rawds/heart-c.csv"
        }
    ],
    "log1p": [
        {
            "expr": "expr_25",
            "code": "lambda df: numpy.log1p(df[ 'oldpeak' ])",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: numpy.log1p(df[ 'wind_speed' ])",
            "dataset": "/data/openml_rawds/no2.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.log1p(df[ 'median_house_value' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: numpy.log1p(df[ 'free.sulfur.dioxide' ])",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: numpy.log1p(df[ 'loc' ].loc({\"1\":\"price_eur\"}))",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "DataFrame": [
        {
            "expr": "expr_29",
            "code": "lambda df: pandas.DataFrame(df[ 'slope' ].value_counts().sort_index())",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: pandas.DataFrame(df[ 'values' ], columns=[\"x1\",\"y1\",\"x2\",\"y2\",\"x3\",\"y3\",\"x4\",\"y4\",\"x5\",\"y5\",\"x6\",\"y6\",\"x7\",\"y7\",\"x8\",\"y8\",\"Digits\"])",
            "dataset": "/data/openml_rawds/BNG(waveform-5000,nominal,1000000).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.DataFrame(df[ 'median_income' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.DataFrame(df[ 'reg_name' ].value_counts().sort_values(ascending=False))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: pandas.DataFrame(numpy.sort(df[ 'quality' ].unique()), columns={\"0\":\"Quality\"})",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: pandas.DataFrame(df[ 'f13' ])",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: pandas.DataFrame(df[ 'f14' ])",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: pandas.DataFrame(df[ 'f25' ])",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.DataFrame(df[ 'cap-shape' ].value_counts())",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.DataFrame(df[ 'cap-color' ].value_counts())",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.DataFrame(df[ 'wt' ])",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.DataFrame((2 + df[ 'wt' ]))",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: pandas.DataFrame(df[ 'log_number_of_reviews' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: pandas.DataFrame((df[ 'log_number_of_reviews' ] > 8.56))",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_28",
            "code": "lambda df: pandas.DataFrame(df[ 'hashtags' ].value_counts())",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: pandas.DataFrame(df[ 'str' ].split(\"-\", 1).tolist(), columns={\"0\":\"device_type\",\"1\":\"us_state\"})",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_50",
            "code": "lambda df: pandas.DataFrame(df[ 'aic' ], columns={\"0\":\"param\",\"1\":\"param_seasonal\",\"2\":\"AIC\"})",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: pandas.DataFrame(df[ 'weight_class' ].value_counts())",
            "dataset": "/data/kaggle-11k/data/csvs/ufcdata.zip_data.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.DataFrame(df[ 'belts' ], columns={\"0\":\"belts\"})",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: pandas.DataFrame(df[ 'fatal' ], columns={\"0\":\"fatal\"})",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.DataFrame(df[ 'maker' ].value_counts().to_dict(), index={\"0\":\"courses\"})",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: pandas.DataFrame(df[ 'user_name' ].count())",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        }
    ],
    "as_matrix": [
        {
            "expr": "expr_31",
            "code": "lambda df: df[ 'thal' ].as_matrix()",
            "dataset": "/data/openml_rawds/heart-c.csv"
        }
    ],
    "drop": [
        {
            "expr": "expr_33",
            "code": "lambda df: df[ 'columns' ].drop(\"thal\")",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_34",
            "code": "lambda df: pandas.concat(pandas.read_csv(\"../input/heart.csv\"), axis=1).drop(columns={\"0\":\"cp\",\"1\":\"thal\",\"2\":\"slope\"})",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_35",
            "code": "lambda df: pandas.concat(pandas.get_dummies(df[ 'cp' ], prefix=\"cp\"), axis=1).drop(columns={\"0\":\"cp\",\"1\":\"thal\",\"2\":\"slope\"})",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: pandas.concat(pandas.read_csv(\"../input/brain-tumor/data.csv\"), axis=1).drop({\"0\":\"y\",\"1\":\"Normal\"}, axis=1)",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'quality' ].drop(\"quality\")",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"location\",\"1\":\"total_deaths\",\"2\":\"population\",\"3\":\"gdp_per_capita\",\"4\":\"human_development_index\"}).copy().dropna(axis=0).drop({\"0\":\"location\",\"1\":\"total_deaths\"}, axis=1)",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        }
    ],
    "abs": [
        {
            "expr": "expr_3",
            "code": "lambda df: numpy.abs(df[ 'normalized-losses' ])",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.abs((df[ 'normalized-losses' ] - df[ 'normalized-losses' ].mean()))",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: numpy.abs(df[ 'normalized-losses' ].mean())",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        }
    ],
    "std": [
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'normalized-losses' ].std()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: numpy.std(df[ 'concavity_se' ])",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'f5' ].std()",
            "dataset": "/data/openml_rawds/isolet.csv"
        }
    ],
    "fillna": [
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'num-of-doors' ].fillna(\"four\")",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'bore' ].fillna(df[ 'bore' ].mean())",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'peak-rpm' ].fillna(df[ 'peak-rpm' ].mean())",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'total_bedrooms' ].fillna(df[ 'total_bedrooms' ].mean())",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'input11' ].fillna(0)",
            "dataset": "/data/openml_rawds/optdigits.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'input11' ].fillna(df[ 'input11' ].mean())",
            "dataset": "/data/openml_rawds/optdigits.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'capacity' ].fillna((df[ 'capacity' ].mode() [0]))",
            "dataset": "/data/kaggle-11k/data/csvs/cinema-ticket.zip_cinemaTicket_Ref.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'casi_testati' ].fillna(0)",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'director' ].fillna(\"No Director Specified\")",
            "dataset": "/data/kaggle-11k/data/csvs/imdb-movie-19722019.zip_imdb_1972-2019.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: df[ 'hashtags' ].fillna(\"No HashTag\")",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_33",
            "code": "lambda df: df[ 'locale' ].fillna(\"Not specified\")",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'iso_code' ].fillna(\"Unknown\")",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_36",
            "code": "lambda df: df[ 'continent' ].fillna(\"unknown\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'bedrooms' ].fillna(df[ 'bedrooms' ].median())",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        },
        {
            "expr": "expr_53",
            "code": "lambda df: df[ 'player_traits' ].fillna(\"No traits available\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "to_frame": [
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'drive-wheels' ].value_counts().to_frame()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'engine-location' ].value_counts().to_frame()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'count' ].to_frame()",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'pregnant' ].value_counts().to_frame()",
            "dataset": "/data/openml_rawds/BNG(hypothyroid,nominal,1000000).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'median_house_value' ].sort_values(ascending=False).head(10).to_frame()",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'median_income' ].sort_values(ascending=False).head(10).to_frame()",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'itching' ].value_counts().to_frame()",
            "dataset": "/data/openml_rawds/BNG(dermatology,nominal,1000000).csv"
        }
    ],
    "pearsonr": [
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'stats' ].pearsonr(df[ 'wheel-base' ], df[ 'price' ])",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        }
    ],
    "apply": [
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'num-of-cylinders' ].apply(df[ 'word_to_num' ])",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        }
    ],
    "to_dict": [
        {
            "expr": "expr_18",
            "code": "lambda df: df[ 'fuel-system' ].value_counts().to_dict()",
            "dataset": "/data/openml_rawds/BNG(autos).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'flag' ].value_counts().to_dict()",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'maker' ].value_counts().to_dict()",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "copy": [
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'stroke' ].copy()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'loc' ].loc({\"1\":{\"0\":\"mass\",\"1\":\"location\",\"2\":\"location_code\"}}).copy()",
            "dataset": "/data/openml_rawds/diabetes.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'total_sales' ].copy()",
            "dataset": "/data/kaggle-11k/data/csvs/cinema-ticket.zip_cinemaTicket_Ref.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"location\",\"1\":\"total_deaths\",\"2\":\"population\",\"3\":\"gdp_per_capita\",\"4\":\"human_development_index\"}).copy()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        }
    ],
    "isnull": [
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'compression-ratio' ].isnull()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'horsepower' ].isnull()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'input11' ].isnull()",
            "dataset": "/data/openml_rawds/optdigits.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'input1' ].isnull()",
            "dataset": "/data/openml_rawds/optdigits.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'r2' ].isnull()",
            "dataset": "/data/openml_rawds/CovPokElec.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'f3' ].isnull()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'stalk-root' ].isnull()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'vendor_rating' ].isnull()",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'vendor_tag_name' ].isnull()",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'drive' ].isnull()",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        },
        {
            "expr": "expr_72",
            "code": "lambda df: pandas.isnull(df[ 'lm' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "median": [
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'horsepower' ].median()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'education' ].median()",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'serum_cholestoral' ].median()",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'total_bedrooms' ].median()",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'f5' ].median()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'total_points' ].median()",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'percentage_male' ].median()",
            "dataset": "/data/kaggle-11k/data/csvs/diverse-algorithm-analysis-dataset-daad.zip_Pokemon_categorical.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'bedrooms' ].median()",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        }
    ],
    "array": [
        {
            "expr": "expr_0",
            "code": "lambda df: numpy.array(df[ 'pixel1' ])",
            "dataset": "/data/openml_rawds/gina_prior.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: numpy.array(df[ 'd' ])",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: numpy.array(df[ 'median_house_value' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: numpy.array(df[ 'total_bedrooms' ])",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: numpy.array(df[ 'eggs' ])",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.array(df[ 'loc' ].null({}).null({\"0\":\"eggs\",\"1\":\"airborne\",\"2\":\"fins\",\"3\":\"legs\",\"4\":\"hair\",\"5\":\"class_type\"}))",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: numpy.array(df[ 'hail' ])",
            "dataset": "/data/openml_rawds/soybean.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: numpy.array(df[ 'symmetry_mean' ])",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: numpy.array(df[ 'fractal_dimension_mean' ])",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: numpy.array(df[ 'alcohol' ])",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: numpy.array(df[ 'fog' ])",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        },
        {
            "expr": "expr_38",
            "code": "lambda df: numpy.array(df[ 'version' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: numpy.array(df[ 'total_cases_per_million' ])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: numpy.array(df[ 'Counter' ].Counter(df[ 'loser_ioc' ]).most_common())",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_73",
            "code": "lambda df: numpy.array(df[ 'rm' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "to_datetime": [
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.to_datetime(df[ 'timestamp' ], unit=\"s\")",
            "dataset": "/data/openml_rawds/BNG(cylinder-bands).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.to_datetime(df[ 'timestamp' ])",
            "dataset": "/data/openml_rawds/BNG(cylinder-bands).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.to_datetime(df[ 'Date' ], format=\"%m/%d/%Y %I:%M:%S %p\")",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-in-italy.zip_covid19_italy_region.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.to_datetime(df[ 'Date' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-in-italy.zip_covid19_italy_region.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: pandas.to_datetime(df[ 'created_at_x' ], format=\"%a %b %d %H:%M:%S +0000 %Y\")",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: pandas.to_datetime(df[ 'created_at_y' ], format=\"%a %b %d %H:%M:%S +0000 %Y\")",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.to_datetime(df[ 'trans_date_trans_time' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: pandas.to_datetime(df[ 'unix_time' ], unit=\"s\")",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: pandas.to_datetime(df[ 'updated_at' ], utc=True)",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_customers.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: pandas.to_datetime(df[ 'start_date' ])",
            "dataset": "/data/kaggle-11k/data/csvs/indian-card-payment-data-set.zip_rbi_payment_data_as_on_aug_2019.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.to_datetime(df[ 'end_date' ])",
            "dataset": "/data/kaggle-11k/data/csvs/indian-card-payment-data-set.zip_rbi_payment_data_as_on_aug_2019.csv"
        }
    ],
    "skew": [
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'respiratory_rate' ].skew()",
            "dataset": "/data/openml_rawds/colic.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'total_protein' ].skew()",
            "dataset": "/data/openml_rawds/colic.csv"
        }
    ],
    "null": [
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"11\":\"abdomo_appearance\",\"12\":\"rectal_temp\",\"13\":\"pulse\",\"14\":\"respiratory_rate\",\"15\":\"packed_cell_volume\",\"0\":\"temp_of_extremities\",\"1\":\"peripheral_pulse\",\"2\":\"mucous_membrane\",\"3\":\"capillary_refill_time\",\"4\":\"pain\",\"5\":\"peristalsis\",\"6\":\"abdominal_distention\",\"7\":\"nasogastric_tube\",\"8\":\"nasogastric_reflux\",\"9\":\"rectal_exam_feces\",\"10\":\"abdomen\"})",
            "dataset": "/data/openml_rawds/colic.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'iloc' ].null({})",
            "dataset": "/data/openml_rawds/cocomo_numeric.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"eggs\",\"1\":\"airborne\",\"2\":\"fins\",\"3\":\"legs\",\"4\":\"hair\",\"5\":\"class_type\"})",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"radius_mean\",\"1\":\"area_mean\",\"2\":\"fractal_dimension_se\"})",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"11\":\"epa\",\"12\":\"week\",\"13\":\"DL_num\",\"14\":\"LB_num\",\"15\":\"DB_num\",\"16\":\"RB_num\",\"17\":\"TE_num\",\"18\":\"WR_num\",\"0\":\"quarter\",\"1\":\"down\",\"2\":\"yardsToGo\",\"3\":\"yardlineNumber\",\"4\":\"defendersInTheBox\",\"5\":\"numberOfPassRushers\",\"6\":\"preSnapVisitorScore\",\"7\":\"preSnapHomeScore\",\"8\":\"absoluteYardlineNumber\",\"9\":\"offensePlayResult\",\"10\":\"playResult\"})",
            "dataset": "/data/openml_rawds/cloud.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"none\",\"1\":\"bt\",\"2\":\"tt\"})",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'loc' ].null({\"0\":2600}).null({\"0\":\"article_link\",\"1\":\"headline\",\"2\":\"website\"})",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"white_rating\",\"1\":\"moves\"})",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-database-by-pokeapico.zip_pokemon.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"name\",\"1\":\"type1\",\"2\":\"type2\",\"3\":\"hp\",\"4\":\"attack\",\"5\":\"defense\",\"6\":\"sp_attack\",\"7\":\"sp_defense\",\"8\":\"speed\"})",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"location\",\"1\":\"total_deaths\",\"2\":\"population\",\"3\":\"gdp_per_capita\",\"4\":\"human_development_index\"})",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_36",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"short_name\",\"1\":\"age\",\"2\":\"overall\",\"3\":\"potential\",\"4\":\"value_eur\"})",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "to_numeric": [
        {
            "expr": "expr_11",
            "code": "lambda df: pandas.to_numeric(df[ 'packed_cell_volume' ], errors=\"coerce\")",
            "dataset": "/data/openml_rawds/colic.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.to_numeric(df[ 'resting_blood_pressure' ])",
            "dataset": "/data/openml_rawds/BNG(heart-statlog).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: pandas.to_numeric(df[ 'capture_rate' ])",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.to_numeric(df[ 'labor_force' ], errors=\"coerce\")",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        }
    ],
    "reset_index": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'race' ].value_counts().reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/dpic-execution-data-1976-2020.zip_DPIC Execution Database Cleaned.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'Q6' ].value_counts().to_frame().reset_index()",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.DataFrame(df[ 'winner' ].value_counts()).reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/us-house-cook-ratings-election-results-20022018.zip_2002-2018_house_election_ratings_results.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'subject' ].value_counts().reset_index()",
            "dataset": "/data/openml_rawds/analcatdata_apnea2.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'user_id' ].count().reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'user_id' ].count().reset_index().pivot(values=\"user_id\", index=\"day\", columns=\"is_click\").reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'user_id' ].count().reset_index().pivot(values=\"user_id\", index=\"utm_source\", columns=\"is_click\").reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'new_confirmed_cases' ].sum().reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: pandas.DataFrame(df[ 'hashtags' ].value_counts()).reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-vaccine-tweets.zip_file.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'armed' ].value_counts().reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'language_code' ].agg({\"0\":\"unique\"}).reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: df[ 'ratings_count' ].sum().reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'manufacture_year' ].mean().round().rename(\"avg_manufacture_year\").reset_index()",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "sum": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'fnlwgt' ].sum()",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'capital_run_length_total' ].sum()",
            "dataset": "/data/openml_rawds/spambase.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'e**2' ].sum()",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'population' ].sum()",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'population' ].sum().sum()",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'f3' ].isnull().sum()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'f5' ].sort_values(ascending=False).head(7).sum()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'stalk-root' ].isnull().sum()",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'new_confirmed_cases' ].sum()",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: df[ 'sp_defense' ].sum()",
            "dataset": "/data/kaggle-11k/data/csvs/the-complete-pokemon-dataset.zip_Pokemon_data.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'ratings_count' ].sum()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'overall_satisfaction' ].sum()",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        }
    ],
    "log": [
        {
            "expr": "expr_5",
            "code": "lambda df: numpy.log(df[ 'fnlwgt' ])",
            "dataset": "/data/openml_rawds/BNG(adult).csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: numpy.log(df[ 'f32' ])",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: numpy.log(df[ 'mileage' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "plot": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'fruit' ].value_counts().plot(kind=\"bar\", color=\"r\")",
            "dataset": "/data/openml_rawds/squash-unstored.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'new_deaths' ].sum().plot(legend=True, x=\"date\", y=\"new_deaths\", color=\"b\")",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        }
    ],
    "describe": [
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ 'iloc' ].null({}) [21]).describe()",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'f10' ].describe()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'new_tests' ].describe()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'retweet_count' ].describe()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        }
    ],
    "crosstab": [
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.crosstab(df[ 'checking_status' ], df[ 'risk' ])",
            "dataset": "/data/openml_rawds/BNG(credit-g,nominal,1000000).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.crosstab(df[ 'savings_status' ], df[ 'risk' ])",
            "dataset": "/data/openml_rawds/BNG(credit-g,nominal,1000000).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: pandas.crosstab(df[ 'x4' ], df[ 'y' ])",
            "dataset": "/data/openml_rawds/BNG(waveform-5000,nominal,1000000).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: pandas.crosstab(df[ 'date' ], df[ 'city_id' ])",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_41",
            "code": "lambda df: pandas.crosstab(df[ 'version' ], df[ 'retention_7' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_42",
            "code": "lambda df: pandas.crosstab(df[ 'version' ], df[ 'retention_1' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "unique": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'housing' ].unique()",
            "dataset": "/data/openml_rawds/nursery.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'speaker' ].unique()",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'legs' ].unique()",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'molecule_name' ].unique()",
            "dataset": "/data/openml_rawds/musk.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.unique(df[ 'disease_type' ])",
            "dataset": "/data/openml_rawds/kidney.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'ae' ].unique()",
            "dataset": "/data/openml_rawds/sleuth_ex2016.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'bt/tt' ].unique()",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'title_id' ].unique()",
            "dataset": "/data/openml_rawds/Click_prediction_small.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'user_id' ].unique()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'player_url' ].unique()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "sort_values": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'capital_run_length_average' ].mean().sort_values(ascending=False)",
            "dataset": "/data/openml_rawds/spambase.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'capital_run_length_longest' ].sum().sort_values(ascending=False)",
            "dataset": "/data/openml_rawds/spambase.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'population' ].sum().sort_values()",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'median_income' ].sort_values(ascending=False)",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'f5' ].sort_values(ascending=False)",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'new_confirmed_cases' ].sum().reset_index().sort_values(\"new_confirmed_cases\")",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'ethnicity' ].value_counts().sort_values(ascending=False)",
            "dataset": "/data/kaggle-11k/data/csvs/linkedin-profile-data.zip_LinkedIn Profile Data.csv"
        },
        {
            "expr": "expr_60",
            "code": "lambda df: df[ 'producer' ].value_counts().sort_values(ascending=False)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: df[ 'ratings_count' ].sum().reset_index().sort_values(\"ratings_count\", ascending=False)",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_34",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"short_name\",\"1\":\"age\",\"2\":\"overall\",\"3\":\"potential\",\"4\":\"value_eur\",\"5\":\"potential_value\",\"6\":\"value_change\"}).sort_values(ascending=False, by=\"potential\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_35",
            "code": "lambda df: df[ 'loc' ].null({}).null({\"0\":\"short_name\",\"1\":\"overall\",\"2\":\"potential\",\"3\":\"value_eur\",\"4\":\"potential_value\",\"5\":\"value_change\"}).sort_values(ascending=False, by=\"value_change\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "to_numpy": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'd' ].to_numpy()",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'symboling' ].to_numpy()",
            "dataset": "/data/openml_rawds/BNG(autoPrice).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'p4' ].to_numpy()",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'a1' ].to_numpy()",
            "dataset": "/data/openml_rawds/pwLinear.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'distance' ].to_numpy()",
            "dataset": "/data/kaggle-11k/data/csvs/dating-app-lovoo-user-profiles.zip_lovoo_v3_users_api-results.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'public' ].to_numpy()",
            "dataset": "/data/openml_rawds/sleuth_case1201.csv"
        }
    ],
    "where": [
        {
            "expr": "expr_5",
            "code": "lambda df: numpy.where(df[ 'sales' ], 0, 1)",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: numpy.where((df[ 'sales' ] == 0), 0, 1)",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: numpy.where(df[ 'platelets' ], 212500, df[ 'platelets' ])",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: numpy.where((df[ 'platelets' ] <= 212500), 212500, df[ 'platelets' ])",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: numpy.where(df[ 'toothed' ], 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: numpy.where((df[ 'toothed' ] == \"n\"), 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: numpy.where(df[ 'breathes' ], 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: numpy.where((df[ 'breathes' ] == \"n\"), 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: numpy.where(df[ 'fins' ], 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: numpy.where((df[ 'fins' ] == \"n\"), 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: numpy.where(df[ 'legs' ], 1, 0)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: numpy.where((df[ 'legs' ] > 0), 1, 0)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: numpy.where(df[ 'catsize' ], 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: numpy.where((df[ 'catsize' ] == \"n\"), 0, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_37",
            "code": "lambda df: numpy.where(df[ 'state_code.1' ], True, False)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_38",
            "code": "lambda df: numpy.where(df[ 'state_code' ], True, False)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_39",
            "code": "lambda df: numpy.where((df[ 'state_code' ] != df[ 'state_code.1' ]), True, False)",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where(df[ 'nationality' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"France\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"England\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "sqrt": [
        {
            "expr": "expr_11",
            "code": "lambda df: numpy.sqrt((2 + df[ 'values' ]).mean())",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: numpy.sqrt((df[ 'values' ] - df[ 'values' ]).mean())",
            "dataset": "/data/openml_rawds/jm1.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.sqrt(df[ 'mileage' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "quantile": [
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'mpg' ].quantile(0.75)",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'mpg' ].quantile(0.25)",
            "dataset": "/data/openml_rawds/cars.csv"
        }
    ],
    "min": [
        {
            "expr": "expr_2",
            "code": "lambda df: numpy.min(df[ 'displacement' ])",
            "dataset": "/data/openml_rawds/autoMpg.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'density' ].min()",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'green' ].min()",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'blue' ].min()",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_50",
            "code": "lambda df: df[ 'f97' ].min()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'day_from_jan_first' ].min()",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        }
    ],
    "max": [
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.max(df[ 'displacement' ])",
            "dataset": "/data/openml_rawds/autoMpg.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'case_number' ].max()",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'number_of_days' ].max()",
            "dataset": "/data/openml_rawds/pbcseq.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'r2' ].max()",
            "dataset": "/data/openml_rawds/CovPokElec.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'smoothness_mean' ].max()",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'density' ].max()",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'blue' ].max()",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_49",
            "code": "lambda df: df[ 'f97' ].max()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'total_cases' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'city_id' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'cycle' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/campaign-contributions-19902016.zip_individual_contributions.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'percentage_male' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/diverse-algorithm-analysis-dataset-daad.zip_Pokemon_categorical.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'month_number' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/indian-card-payment-data-set.zip_rbi_payment_data_as_on_aug_2019.csv"
        },
        {
            "expr": "expr_46",
            "code": "lambda df: df[ 'release_clause_eur' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_54",
            "code": "lambda df: df[ 'movement_reactions' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_76",
            "code": "lambda df: df[ 'lwb' ].max()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "concat": [
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.concat(pandas.get_dummies(df[ 'cp' ], drop_first=True), axis=1)",
            "dataset": "/data/openml_rawds/heart-c.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).concat(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").Class(\"Class\")))",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).concat(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates((df[ 'values' ] [0])))",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).concat(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates((pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").Class(\"Class\") == (df[ 'values' ] [0]))))",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: pandas.concat(df[ 'ability_1' ], axis=0)",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: pandas.concat(df[ 'ability_2' ], axis=0)",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        }
    ],
    "minmax_scaling": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'minmax_scaling' ].minmax_scaling(df[ 'goal' ], columns={\"0\":0})",
            "dataset": "/data/openml_rawds/Ailerons.csv"
        }
    ],
    "rename": [
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'Gender' ].value_counts().to_frame().reset_index().rename(columns={\"index\":\"gender\",\"Gender\":\"total\"}, inplace=False)",
            "dataset": "/data/kaggle-11k/data/csvs/campaign-contributions-19902016.zip_individual_contributions.csv"
        }
    ],
    "sort_index": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'label' ].value_counts().sort_index()",
            "dataset": "/data/openml_rawds/eye_movements.csv"
        }
    ],
    "rstrip": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'str' ].rstrip()",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        }
    ],
    "lstrip": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'str' ].lstrip()",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        }
    ],
    "strip": [
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'str' ].strip()",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'speaker' ].strip()",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        }
    ],
    "nunique": [
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'speaker' ].nunique()",
            "dataset": "/data/openml_rawds/BNG(JapaneseVowels).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'work_id' ].nunique()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: df[ 'abilities_number' ].nunique()",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        }
    ],
    "isna": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'wind_direction' ].isna()",
            "dataset": "/data/openml_rawds/no2.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'r2' ].isna()",
            "dataset": "/data/openml_rawds/CovPokElec.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: pandas.isna(df[ 'number_of_reviews' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        }
    ],
    "fit": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'LabelEncoder' ].LabelEncoder().fit(df[ 'protocol_type' ])",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'LabelBinarizer' ].LabelBinarizer().fit(df[ 'protocol_type' ])",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        }
    ],
    "corr": [
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'dst_host_srv_serror_rate' ].corr(df[ 'srv_serror_rate' ])",
            "dataset": "/data/openml_rawds/KDDCup99_full.csv"
        }
    ],
    "unstack": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'show' ].value_counts(normalize=True).unstack(\"show\")",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'show' ].value_counts(normalize=True).unstack(\"handicap\")",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'show' ].value_counts(normalize=True).unstack(\"alcoholism\")",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'show' ].value_counts(normalize=True).unstack(\"hypertension\")",
            "dataset": "/data/openml_rawds/analcatdata_broadwaymult.csv"
        }
    ],
    "choice": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'random' ].choice(numpy.array(df[ 'median_house_value' ]), 30, replace=True)",
            "dataset": "/data/openml_rawds/houses.csv"
        }
    ],
    "tolist": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'skewness' ].tolist()",
            "dataset": "/data/openml_rawds/meta.csv"
        },
        {
            "expr": "expr_44",
            "code": "lambda df: df[ 'messages' ].tolist()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: df[ 'tag_name' ].tolist()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'short_name' ].tolist()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_57",
            "code": "lambda df: df[ 'mentality_vision' ].tolist()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "confusion_matrix": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'confusion_matrix' ].confusion_matrix(df[ 'class' ], df[ 'itching' ])",
            "dataset": "/data/openml_rawds/BNG(dermatology,nominal,1000000).csv"
        }
    ],
    "imread": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'image' ].imread((\"/kaggle/input/english-handwritten-characters-dataset/\" + df[ 'at' ].at({\"0\":2387,\"1\":\"image\"})))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'image' ].imread(df[ 'at' ].at({\"0\":2387,\"1\":\"image\"}))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'image' ].imread((\"/kaggle/input/english-handwritten-characters-dataset/\" + df[ 'at' ].at({\"0\":473,\"1\":\"image\"})))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'image' ].imread(df[ 'at' ].at({\"0\":473,\"1\":\"image\"}))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: cv2.imread(df[ 'image' ])",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: cv2.imread((\"../input/humpback-whale-identification/test/\" + df[ 'image' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: cv2.imread((\"../input/humpback-whale-identification/train/\" + df[ 'image' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "join": [
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'path' ].join(\"../input/image-classify-data\", df[ 'at' ].at({\"1\":\"Image_Path\"}))",
            "dataset": "/data/openml_rawds/analcatdata_authorship.csv"
        }
    ],
    "mod": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'a1' ].sub(df[ 'a2' ]).mod(3)",
            "dataset": "/data/openml_rawds/pwLinear.csv"
        }
    ],
    "sub": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'a1' ].sub(df[ 'a2' ])",
            "dataset": "/data/openml_rawds/pwLinear.csv"
        }
    ],
    "reshape": [
        {
            "expr": "expr_3",
            "code": "lambda df: numpy.array(df[ 'eggs' ]).reshape(-1, 1)",
            "dataset": "/data/openml_rawds/BNG(zoo).csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: numpy.array(df[ 'symmetry_mean' ]).reshape(-1, 1)",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: numpy.array(df[ 'fractal_dimension_mean' ]).reshape(-1, 1)",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: numpy.array(df[ 'odor' ]).reshape(-1, 1)",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_53",
            "code": "lambda df: df[ 'h1' ].flatten().reshape(-1, 1)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "Path": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'Path' ].Path(df[ 'stem' ])",
            "dataset": "/data/openml_rawds/soybean.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'Path' ].Path((\"_mask.png\" + df[ 'stem' ]))",
            "dataset": "/data/openml_rawds/soybean.csv"
        }
    ],
    "notnull": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'r2' ].notnull()",
            "dataset": "/data/openml_rawds/CovPokElec.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.to_numeric(df[ 'labor_force' ], errors=\"coerce\").notnull()",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        }
    ],
    "corrwith": [
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.read_csv(\"train.csv\").read_csv({\"22\":\"s20\",\"11\":\"s9\",\"23\":\"s21\",\"12\":\"s10\",\"13\":\"s11\",\"14\":\"s12\",\"15\":\"s13\",\"16\":\"s14\",\"17\":\"s15\",\"18\":\"s16\",\"19\":\"s17\",\"0\":\"setting1\",\"1\":\"setting2\",\"2\":\"setting3\",\"3\":\"s1\",\"4\":\"s2\",\"5\":\"s3\",\"6\":\"s4\",\"7\":\"s5\",\"8\":\"s6\",\"9\":\"s7\",\"20\":\"s18\",\"21\":\"s19\",\"10\":\"s8\"}).corrwith(df[ 'ttf' ])",
            "dataset": "/data/openml_rawds/CovPokElec.csv"
        }
    ],
    "ttest_rel": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'stats' ].ttest_rel(df[ 'radius_mean' ], df[ 'area_mean' ])",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        }
    ],
    "round": [
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'compactness_mean' ].round(2)",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: numpy.round((100 * df[ 'buying' ].value_counts(normalize=True)))",
            "dataset": "/data/openml_rawds/car.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: numpy.round(df[ 'buying' ].value_counts(normalize=True))",
            "dataset": "/data/openml_rawds/car.csv"
        }
    ],
    "count": [
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'compactness_se' ].count()",
            "dataset": "/data/openml_rawds/wisconsin.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'blue' ].count()",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'ad_id' ].count()",
            "dataset": "/data/openml_rawds/Click_prediction_small.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: df[ 'user_id' ].count()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'manner_of_death' ].count()",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'tweet_id' ].count()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: df[ 'user_name' ].count()",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        }
    ],
    "bincount": [
        {
            "expr": "expr_14",
            "code": "lambda df: numpy.bincount(df[ 'quality' ])",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        }
    ],
    "sort": [
        {
            "expr": "expr_15",
            "code": "lambda df: numpy.sort(df[ 'quality' ].unique())",
            "dataset": "/data/openml_rawds/BNG(wine_quality).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: numpy.sort(df[ 'zipcode-4' ].unique())",
            "dataset": "/data/openml_rawds/Agrawal1.csv"
        }
    ],
    "to_list": [
        {
            "expr": "expr_33",
            "code": "lambda df: df[ 'f35' ].sample(10000).to_list()",
            "dataset": "/data/openml_rawds/isolet.csv"
        },
        {
            "expr": "expr_37",
            "code": "lambda df: df[ 'f44' ].sample(10000).to_list()",
            "dataset": "/data/openml_rawds/isolet.csv"
        }
    ],
    "PairGrid": [
        {
            "expr": "expr_6",
            "code": "lambda df: seaborn.PairGrid((df[ 'iloc' ].null({}) [1]), palette=\"RdPu\", hue=\"red\")",
            "dataset": "/data/openml_rawds/flags.csv"
        }
    ],
    "items": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'class2' ].value_counts().items().items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'class2' ].value_counts().items().items(df[ 'class1' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'class1' ].value_counts().items().items(df[ 'class2' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'class2' ].value_counts().items().items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: df[ 'class1' ].value_counts().items().items(df[ 'class2' ].value_counts().items()).items(df[ 'class2' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'class1' ].value_counts().items().items(df[ 'class2' ].value_counts().items()).items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'class2' ].value_counts().items().items(df[ 'class1' ].value_counts().items()).items(df[ 'class2' ].value_counts().items()).items(df[ 'class2' ].value_counts().items())",
            "dataset": "/data/openml_rawds/yeast_ml8.csv"
        }
    ],
    "log2": [
        {
            "expr": "expr_44",
            "code": "lambda df: numpy.log2(df[ 'f69' ])",
            "dataset": "/data/openml_rawds/isolet.csv"
        }
    ],
    "bar": [
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'plot' ].bar(subplots=True, rot=0, color={\"lifespan\":\"green\",\"speed\":\"red\"})",
            "dataset": "/data/openml_rawds/white-clover.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'plot' ].bar(subplots=True, rot=0)",
            "dataset": "/data/openml_rawds/white-clover.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'plot' ].bar(legend=False, figsize={\"0\":12,\"1\":8}, x=\"classes\", y=\"entries\", color=\"cornflowerblue\")",
            "dataset": "/data/openml_rawds/white-clover.csv"
        }
    ],
    "factorize": [
        {
            "expr": "expr_3",
            "code": "lambda df: pandas.factorize(df[ 'maint' ])",
            "dataset": "/data/openml_rawds/car.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.factorize(df[ 'lug_boot' ])",
            "dataset": "/data/openml_rawds/car.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: pandas.concat(df[ 'ability_1' ], axis=0).factorize()",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: pandas.concat(df[ 'ability_2' ], axis=0).factorize()",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        }
    ],
    "duplicated": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'index' ].duplicated()",
            "dataset": "/data/openml_rawds/cloud.csv"
        }
    ],
    "agg": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'party' ].agg({\"0\":\"count\"})",
            "dataset": "/data/kaggle-11k/data/csvs/electoralcollege.zip_Electoral_College.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: df[ 'language_code' ].agg({\"0\":\"unique\"})",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        }
    ],
    "drop_duplicates": [
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).drop_duplicates(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").Class(\"Class\")))",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).drop_duplicates(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates((df[ 'values' ] [0])))",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: pandas.concat(UNKNOWN, ignore_index=True).drop_duplicates(pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").drop_duplicates((pandas.read_csv(\"sentence_labels_v3.csv\", usecols={\"0\":\"Text\",\"1\":\"none\",\"2\":\"bt\",\"3\":\"tt\"}).drop_duplicates(\"Text\").Class(\"Class\") == (df[ 'values' ] [0]))))",
            "dataset": "/data/openml_rawds/anneal.csv"
        }
    ],
    "mode": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'capacity' ].mode()",
            "dataset": "/data/kaggle-11k/data/csvs/cinema-ticket.zip_cinemaTicket_Ref.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: df[ 'tests_units' ].mode()",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        }
    ],
    "diff": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'total_hospitalized' ].diff()",
            "dataset": "/data/kaggle-11k/data/csvs/italy-covid19.zip_covid19-ita-regions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'cases' ].diff()",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-challenges.zip_test_data_intl.csv"
        }
    ],
    "nanmedian": [
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.nanmedian(df[ 'stp' ])",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: numpy.nanmedian(df[ 'ah' ])",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        }
    ],
    "turtle": [
        {
            "expr": "expr_8",
            "code": "lambda df: UNKNOWN.turtle(df[ '[pandas, read_csv, set_index, wdsp]' ])",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'wdsp' ].turtle(UNKNOWN)",
            "dataset": "/data/kaggle-11k/data/csvs/weather-data-for-covid19-data-analysis.zip_training_data_with_weather_info_week_1.csv"
        }
    ],
    "count_nonzero": [
        {
            "expr": "expr_8",
            "code": "lambda df: numpy.count_nonzero(df[ 'vendor_tag_name' ].isnull())",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        }
    ],
    "vstack": [
        {
            "expr": "expr_37",
            "code": "lambda df: numpy.vstack(numpy.array(df[ 'version' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "append": [
        {
            "expr": "expr_51",
            "code": "lambda df: UNKNOWN.append(pandas.DataFrame(df[ 'aic' ], columns={\"0\":\"param\",\"1\":\"param_seasonal\",\"2\":\"AIC\"}), ignore_index=True).append(UNKNOWN)",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "flatten": [
        {
            "expr": "expr_52",
            "code": "lambda df: df[ 'h1' ].flatten()",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        }
    ],
    "qcut": [
        {
            "expr": "expr_12",
            "code": "lambda df: pandas.qcut(df[ 'city_pop' ], labels={\"0\":\"low_density\",\"1\":\"med_density\",\"2\":\"high_density\"}, q={\"0\":0,\"1\":0.25,\"2\":0.75,\"3\":1})",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        }
    ],
    "rint": [
        {
            "expr": "expr_16",
            "code": "lambda df: numpy.rint((df[ 'dob' ] / numpy.timedelta64(1, \"Y\")))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: numpy.rint((pandas.to_datetime(\"now\") - df[ 'dob' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "SARIMAX": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'statespace' ].SARIMAX(df[ 'sales' ].resample(\"M\").sum(), seasonal_order={\"0\":1,\"1\":1,\"2\":1,\"3\":12}, enforce_invertibility=False, enforce_stationarity=False, order={\"0\":1,\"1\":1,\"2\":1})",
            "dataset": "/data/kaggle-11k/data/csvs/english-premier-league-results.zip_results.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'statespace' ].SARIMAX(df[ 'sales' ].resample(\"D\").sum(), seasonal_order={\"0\":0,\"1\":1,\"2\":1,\"3\":12}, enforce_invertibility=False, enforce_stationarity=False, order={\"0\":0,\"1\":1,\"2\":1})",
            "dataset": "/data/kaggle-11k/data/csvs/english-premier-league-results.zip_results.csv"
        }
    ],
    "boxplot": [
        {
            "expr": "expr_13",
            "code": "lambda df: seaborn.boxplot((df[ 'assists' ].value_counts() / 14))",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: seaborn.boxplot(df[ 'assists' ].value_counts())",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        }
    ],
    "mark_bar": [
        {
            "expr": "expr_7",
            "code": "lambda df: altair.Chart(pandas.DataFrame(df[ 'weight_class' ].value_counts())).mark_bar(color=\"#564d8d\")",
            "dataset": "/data/kaggle-11k/data/csvs/ufcdata.zip_data.csv"
        }
    ],
    "encode": [
        {
            "expr": "expr_8",
            "code": "lambda df: altair.Chart(pandas.DataFrame(df[ 'weight_class' ].value_counts())).mark_bar(color=\"#564d8d\").encode(x=\"weight_class\", y=\"class\")",
            "dataset": "/data/kaggle-11k/data/csvs/ufcdata.zip_data.csv"
        }
    ],
    "eq": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'belts' ].eq(\"Yes\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'fatal' ].eq(\"Yes\")",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        }
    ],
    "mul": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'belts' ].eq(\"Yes\").mul(1)",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'fatal' ].eq(\"Yes\").mul(1)",
            "dataset": "/data/kaggle-11k/data/csvs/us-traffic-violations-montgomery-county-polict.zip_Traffic_Violations.csv"
        }
    ],
    "Counter": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'Counter' ].Counter(df[ 'subcategory' ])",
            "dataset": "/data/kaggle-11k/data/csvs/products-and-ratings-of-ecommerce-newchiccom.zip_category-bags.csv"
        }
    ],
    "expr": [
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'user_id' ].nunique()))).expr({}, numpy.zeros(df[ 'user_id' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'isbn' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'user_id' ].nunique()))).expr({}, numpy.zeros(df[ 'isbn' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'user_id' ].nunique()))).expr({}, numpy.zeros(df[ 'isbn' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'isbn' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'isbn' ].nunique()))).expr({}, numpy.zeros(df[ 'user_id' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'isbn' ].nunique()))).expr({}, numpy.zeros(df[ 'user_id' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'isbn' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'isbn' ].nunique()))).expr({}, numpy.zeros(df[ 'isbn' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot(numpy.zeros(df[ 'isbn' ].nunique()))).expr({}, numpy.zeros(df[ 'isbn' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'isbn' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: (df[ '[numpy, zeros, mean, null]' ] + df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'user_id' ].nunique()), metric=\"cosine\").dot((numpy.zeros(df[ 'user_id' ].nunique()) - df[ '[numpy, zeros, mean, null]' ]))).expr({}, numpy.zeros(df[ 'user_id' ].nunique()).dot(df[ 'pairwise_distances' ].pairwise_distances(numpy.zeros(df[ 'isbn' ].nunique()), metric=\"cosine\")))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        }
    ],
    "dropna": [
        {
            "expr": "expr_24",
            "code": "lambda df: df[ 'tag_name' ].dropna()",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where(df[ 'nationality' ]).dropna(how=\"all\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"Brazil\")).dropna(how=\"all\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"France\")).dropna(how=\"all\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"Argentina\")).dropna(how=\"all\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: pandas.read_csv(\"/kaggle/input/fifa-20-complete-player-dataset/players_20.csv\").read_csv({\"44\":\"mentality_positioning\",\"45\":\"mentality_vision\",\"46\":\"mentality_penalties\",\"47\":\"mentality_composure\",\"48\":\"defending_marking\",\"49\":\"defending_standing_tackle\",\"50\":\"defending_sliding_tackle\",\"51\":\"goalkeeping_diving\",\"52\":\"goalkeeping_handling\",\"53\":\"goalkeeping_kicking\",\"10\":\"shooting\",\"54\":\"goalkeeping_positioning\",\"11\":\"passing\",\"55\":\"goalkeeping_reflexes\",\"12\":\"dribbling\",\"56\":\"ls\",\"13\":\"defending\",\"57\":\"st\",\"14\":\"physic\",\"58\":\"rs\",\"15\":\"gk_diving\",\"59\":\"lw\",\"16\":\"gk_handling\",\"17\":\"gk_kicking\",\"18\":\"gk_reflexes\",\"19\":\"gk_speed\",\"0\":\"sofifa_id\",\"1\":\"short_name\",\"2\":\"age\",\"3\":\"height_cm\",\"4\":\"weight_kg\",\"5\":\"nationality\",\"6\":\"overall\",\"7\":\"potential\",\"8\":\"player_positions\",\"9\":\"pace\",\"60\":\"lf\",\"61\":\"cf\",\"62\":\"rf\",\"63\":\"rw\",\"20\":\"gk_positioning\",\"64\":\"lam\",\"21\":\"player_traits\",\"65\":\"cam\",\"22\":\"attacking_crossing\",\"66\":\"ram\",\"23\":\"attacking_finishing\",\"67\":\"lm\",\"24\":\"attacking_heading_accuracy\",\"68\":\"lcm\",\"25\":\"attacking_short_passing\",\"69\":\"cm\",\"26\":\"attacking_volleys\",\"27\":\"skill_dribbling\",\"28\":\"skill_curve\",\"29\":\"skill_fk_accuracy\",\"70\":\"rcm\",\"71\":\"rm\",\"72\":\"lwb\",\"73\":\"ldm\",\"30\":\"skill_long_passing\",\"74\":\"cdm\",\"31\":\"skill_ball_control\",\"75\":\"rdm\",\"32\":\"movement_acceleration\",\"76\":\"rwb\",\"33\":\"movement_sprint_speed\",\"77\":\"lb\",\"34\":\"movement_agility\",\"78\":\"lcb\",\"35\":\"movement_reactions\",\"79\":\"cb\",\"36\":\"movement_balance\",\"37\":\"power_shot_power\",\"38\":\"power_jumping\",\"39\":\"power_stamina\",\"80\":\"rcb\",\"81\":\"rb\",\"40\":\"power_strength\",\"41\":\"power_long_shots\",\"42\":\"mentality_aggression\",\"43\":\"mentality_interceptions\"}).where((df[ 'nationality' ] == \"Mexico\")).dropna(how=\"all\")",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "nanmax": [
        {
            "expr": "expr_4",
            "code": "lambda df: numpy.nanmax(df[ 'stringency_index' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-challenges.zip_governmentresponse.csv"
        }
    ],
    "nanmin": [
        {
            "expr": "expr_5",
            "code": "lambda df: numpy.nanmin(df[ 'stringency_index' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-challenges.zip_governmentresponse.csv"
        }
    ],
    "transpose": [
        {
            "expr": "expr_2",
            "code": "lambda df: pandas.DataFrame(df[ 'maker' ].value_counts().to_dict(), index={\"0\":\"courses\"}).transpose()",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "cbrt": [
        {
            "expr": "expr_6",
            "code": "lambda df: numpy.cbrt(df[ 'mileage' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "reciprocal": [
        {
            "expr": "expr_7",
            "code": "lambda df: numpy.reciprocal(df[ 'mileage' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        }
    ],
    "fit_transform": [
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'LabelEncoder' ].LabelEncoder().fit_transform(df[ 'transmission' ])",
            "dataset": "/data/kaggle-11k/data/csvs/craigslist-carstrucks-data.zip_vehicles.csv"
        }
    ],
    "isnan": [
        {
            "expr": "expr_0",
            "code": "lambda df: numpy.isnan(df[ 'cohort_size' ])",
            "dataset": "/data/kaggle-11k/data/csvs/covcsd-covid19-countries-statistical-dataset.zip_USA_COVID_19.csv"
        }
    ],
    "winner_rank_points": [
        {
            "expr": "expr_3",
            "code": "lambda df: df[ '[pandas, read_csv, dropna, dropna, drop, drop, loser_rank_points]' ].winner_rank_points(df[ '[pandas, read_csv, dropna, dropna, drop, drop, winner_rank_points]' ])",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'winner_rank_points' ].winner_rank_points(0).winner_rank_points(df[ 'winner_rank_points' ])",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'winner_rank_points' ].winner_rank_points(0).winner_rank_points(df[ 'winner_rank_points' ]).winner_rank_points(df[ 'winner_rank_points' ])",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'winner_rank_points' ].winner_rank_points(0).winner_rank_points(0)",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: df[ 'winner_rank_points' ].winner_rank_points(0).winner_rank_points(df[ 'winner_rank_points' ]).winner_rank_points(0)",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        }
    ],
    "loser_rank_points": [
        {
            "expr": "expr_4",
            "code": "lambda df: df[ '[pandas, read_csv, dropna, dropna, drop, winner_rank_points]' ].loser_rank_points(df[ '[pandas, read_csv, dropna, dropna, drop, loser_rank_points]' ])",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        }
    ],
    "get_xticklabels": [
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'room_type' ].value_counts().head(5).plot(kind=\"hist\").get_xticklabels()",
            "dataset": "/data/kaggle-11k/data/csvs/airbnb-dataset-of-barcelona-city.zip_barca.csv"
        }
    ],
    "keys": [
        {
            "expr": "expr_39",
            "code": "lambda df: df[ 'preferred_foot' ].value_counts().keys()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "whiten": [
        {
            "expr": "expr_56",
            "code": "lambda df: df[ 'whiten' ].whiten(df[ 'mentality_vision' ].tolist())",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "split": [
        {
            "expr": "expr_59",
            "code": "lambda df: {\"0\":10}.split(df[ 'StratifiedKFold' ].StratifiedKFold(random_state=125, n_splits=2).split(df[ 'values' ], df[ 'values' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "argmax": [
        {
            "expr": "expr_75",
            "code": "lambda df: df[ 'lwb' ].argmax()",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "Transformation Expressions": [
        {
            "expr": "expr_8",
            "code": "lambda df: max(df[ 'mpg' ])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: abs(df[ 'mpg' ])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: abs((df[ 'mpg' ] - df[ 'mpg' ].median()))",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: abs(df[ 'mpg' ].median())",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: set(df[ 'label' ])",
            "dataset": "/data/openml_rawds/sylva_prior.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: set(df[ 'title_id' ].unique())",
            "dataset": "/data/openml_rawds/Click_prediction_small.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: dict(df[ 'category' ].value_counts())",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: max(df[ 'event_name' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_74",
            "code": "lambda df: float(df[ 'lwb' ].max())",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ],
    "Other Expressions": [
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'Kind of sex and eye contact' ]",
            "dataset": "/data/openml_rawds/fishcatch.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'Do you engage in oral sex?' ]",
            "dataset": "/data/openml_rawds/fishcatch.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'age range' ]",
            "dataset": "/data/openml_rawds/BNG(breast-cancer,nominal,1000000).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: df[ 'fbs>120' ]",
            "dataset": "/data/openml_rawds/BNG(heart-h,nominal,1000000).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: ((df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and df[ 'abdominal_distention' ]) and df[ 'surgery' ])",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: ((df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and df[ 'abdominal_distention' ]) and (df[ 'surgery' ] == \"no\"))",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: ((df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and (df[ 'abdominal_distention' ] == \"severe\")) and df[ 'surgery' ])",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: ((df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and (df[ 'abdominal_distention' ] == \"severe\")) and (df[ 'surgery' ] == \"no\"))",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and df[ 'surgery' ])",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'outcome' ].isin({\"0\":\"died\",\"1\":\"euthanized\"}) and (df[ 'surgery' ] == \"no\"))",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: ((df[ 'abdominal_distention' ] == \"severe\") and df[ 'surgery' ])",
            "dataset": "/data/openml_rawds/BNG(colic.ORIG,nominal,1000000).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: ((df[ 'workclass' ] and df[ 'occupation' ]) and df[ 'native.country' ])",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: ((df[ 'workclass' ] and df[ 'occupation' ]) and (df[ 'native.country' ] != \"?\"))",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: ((df[ 'workclass' ] and (df[ 'occupation' ] != \"?\")) and df[ 'native.country' ])",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: ((df[ 'workclass' ] and (df[ 'occupation' ] != \"?\")) and (df[ 'native.country' ] != \"?\"))",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (((df[ 'workclass' ] != \"?\") and df[ 'occupation' ]) and df[ 'native.country' ])",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: (((df[ 'workclass' ] != \"?\") and df[ 'occupation' ]) and (df[ 'native.country' ] != \"?\"))",
            "dataset": "/data/openml_rawds/adult.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'iloc' ].null({}) [0])",
            "dataset": "/data/openml_rawds/ICU.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'Zinc index' ]",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'Copper index' ]",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'index' ] [9])",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'iloc' ].null({}) [233])",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'iloc' ].null({}) [221])",
            "dataset": "/data/openml_rawds/prnn_crabs.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'cos day' ]",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: df[ 'sin day' ]",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: (df[ 'Country Name' ] and df[ 'period' ])",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'Country Name' ] and (df[ 'period' ] == \"year\"))",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: ((df[ 'Country Name' ] == \"China, P.R.: Mainland\") and df[ 'period' ])",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: ((df[ 'Country Name' ] == \"China, P.R.: Mainland\") and (df[ 'period' ] == \"year\"))",
            "dataset": "/data/openml_rawds/electricity.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'e**2' ]",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_20",
            "code": "lambda df: (df[ 'A' ] and df[ 'B' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: (df[ 'A' ] and (df[ 'B' ] > 1))",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_22",
            "code": "lambda df: ((df[ 'A' ] > 0) and df[ 'B' ])",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_23",
            "code": "lambda df: ((df[ 'A' ] > 0) and (df[ 'B' ] > 1))",
            "dataset": "/data/openml_rawds/kc2.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'name' ] [0])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'name' ].name(((df[ 'name' ] [0]) [0])) [1])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'name' ].name(((df[ 'name' ] [0]) [1])) [1])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: ((df[ 'name' ].name(((df[ 'name' ] [0]) [0])) [0]) [1])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: ((df[ 'name' ].name(((df[ 'name' ] [0]) [1])) [0]) [1])",
            "dataset": "/data/openml_rawds/cars.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'p1' ] [100])",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'p2' ] [100])",
            "dataset": "/data/openml_rawds/molecular-biology_promoters.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'shape' ] [1])",
            "dataset": "/data/openml_rawds/Stagger3.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'motor' ] and df[ 'screw' ])",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'motor' ] and (df[ 'screw' ] == \"E\"))",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: ((df[ 'motor' ] == \"E\") and df[ 'screw' ])",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: ((df[ 'motor' ] == \"E\") and (df[ 'screw' ] == \"E\"))",
            "dataset": "/data/openml_rawds/servo.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'query on thyroxine' ]",
            "dataset": "/data/openml_rawds/hypothyroid.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: df[ 'thyroid surgery' ]",
            "dataset": "/data/openml_rawds/hypothyroid.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'query hypothyroid' ]",
            "dataset": "/data/openml_rawds/hypothyroid.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'referral source' ]",
            "dataset": "/data/openml_rawds/hypothyroid.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: (df[ 'rstrip' ] [0])",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: (df[ 'strip' ] [0])",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'lstrip' ] [0])",
            "dataset": "/data/openml_rawds/grub-damage.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: df[ 'rooms/households' ]",
            "dataset": "/data/openml_rawds/houses.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'itching' ] [1])",
            "dataset": "/data/openml_rawds/dermatology.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: ((df[ 'T1_seed' ] and df[ 'T2_seed' ]) and df[ 'T2_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: ((df[ 'T1_seed' ] and df[ 'T2_seed' ]) and df[ 'T1_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: ((df[ 'T1_seed' ] and df[ 'T2_seed' ]) and (df[ 'T1_Score' ] > df[ 'T2_Score' ]))",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: ((df[ 'T1_seed' ] and (df[ 'T2_seed' ] == 4)) and df[ 'T2_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: ((df[ 'T1_seed' ] and (df[ 'T2_seed' ] == 4)) and df[ 'T1_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: ((df[ 'T1_seed' ] and (df[ 'T2_seed' ] == 4)) and (df[ 'T1_Score' ] > df[ 'T2_Score' ]))",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (((df[ 'T1_seed' ] == 13) and df[ 'T2_seed' ]) and df[ 'T2_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (((df[ 'T1_seed' ] == 13) and df[ 'T2_seed' ]) and df[ 'T1_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (((df[ 'T1_seed' ] == 13) and df[ 'T2_seed' ]) and (df[ 'T1_Score' ] > df[ 'T2_Score' ]))",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (((df[ 'T1_seed' ] == 13) and (df[ 'T2_seed' ] == 4)) and df[ 'T2_Score' ])",
            "dataset": "/data/openml_rawds/BNG(soybean).csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'radius_mean' ] and df[ 'diagnosis' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'radius_mean' ] and (df[ 'diagnosis' ] == \"B\"))",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: (df[ 'perimeter_worst' ] and df[ 'texture_mean' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: (df[ 'perimeter_worst' ] and (df[ 'texture_mean' ] > 17))",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: ((df[ 'perimeter_worst' ] > 110) and df[ 'texture_mean' ])",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: ((df[ 'perimeter_worst' ] > 110) and (df[ 'texture_mean' ] > 17))",
            "dataset": "/data/openml_rawds/BNG(wisconsin).csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'fixed.acidity' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'volatile.acidity' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'free.sulfur.dioxide' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: df[ 'total.sulfur.dioxide' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'quality classification' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: df[ 'good quality' ]",
            "dataset": "/data/openml_rawds/wine_quality.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'text' ] [20])",
            "dataset": "/data/openml_rawds/flags.csv"
        },
        {
            "expr": "expr_19",
            "code": "lambda df: (df[ 'stalk-root' ].mode() [0])",
            "dataset": "/data/openml_rawds/mushroom.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'Country or region' ]",
            "dataset": "/data/openml_rawds/analcatdata_bondrate.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: df[ 'pct_black/hispanic' ]",
            "dataset": "/data/openml_rawds/EgyptianSkulls.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'Heart condition' ]",
            "dataset": "/data/openml_rawds/anneal.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: (df[ 'team_2' ] and df[ 'team_1' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'rank_1' ] and df[ 'rank_2' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: (df[ 'rank_1' ] and (df[ 'rank_2' ] < 30))",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: ((df[ 'rank_1' ] < 30) and df[ 'rank_2' ])",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: ((df[ 'rank_1' ] < 30) and (df[ 'rank_2' ] < 30))",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_results.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'capacity' ].mode() [0])",
            "dataset": "/data/kaggle-11k/data/csvs/cinema-ticket.zip_cinemaTicket_Ref.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: df[ 'Short description' ]",
            "dataset": "/data/kaggle-11k/data/csvs/imdb-movie-19722019.zip_imdb_1972-2019.csv"
        },
        {
            "expr": "expr_0",
            "code": "lambda df: ((df[ 'score_set' ] and df[ 'match_set' ]) and df[ 'sorted_brand_set' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_1",
            "code": "lambda df: ((df[ 'score_set' ] and df[ 'match_set' ]) and (df[ 'sorted_brand_set' ] != df[ 'match_set' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: ((df[ 'score_set' ] and df[ 'brand_set' ]) and df[ 'match_set' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: ((df[ 'score_set' ] and df[ 'brand_set' ]) and df[ 'sorted_brand_set' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: ((df[ 'score_set' ] and df[ 'brand_set' ]) and (df[ 'sorted_brand_set' ] != df[ 'match_set' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: ((df[ 'score_set' ] and (df[ 'brand_set' ] != df[ 'match_set' ])) and df[ 'match_set' ])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: (df[ 'ingredients' ] [0])",
            "dataset": "/data/kaggle-11k/data/csvs/all-products-available-on-sephora-website.zip_sephora_website_dataset.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: (df[ 'ethnicity' ] [5005])",
            "dataset": "/data/kaggle-11k/data/csvs/linkedin-profile-data.zip_LinkedIn Profile Data.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'country_id' ] and df[ 'position_id' ])",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: (df[ 'country_id' ] and (df[ 'position_id' ] == 2))",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: ((df[ 'country_id' ] == 1) and df[ 'position_id' ])",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: ((df[ 'country_id' ] == 1) and (df[ 'position_id' ] == 2))",
            "dataset": "/data/kaggle-11k/data/csvs/restaurant-recommendation-challenge.zip_train_full.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'offer completed' ]",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: df[ 'author code' ]",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_54",
            "code": "lambda df: df[ 'section counts' ]",
            "dataset": "/data/kaggle-11k/data/csvs/google-search-results-pages-used-cars-us.zip_cars_forsale_price_us_uk.csv"
        },
        {
            "expr": "expr_4",
            "code": "lambda df: (df[ 'is_fraud' ] and df[ 'amt' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_5",
            "code": "lambda df: (df[ 'is_fraud' ] and (df[ 'amt' ] <= 1500))",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_6",
            "code": "lambda df: ((df[ 'is_fraud' ] == 1) and df[ 'amt' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_7",
            "code": "lambda df: ((df[ 'is_fraud' ] == 1) and (df[ 'amt' ] <= 1500))",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'POI/street' ]",
            "dataset": "/data/kaggle-11k/data/csvs/fraud-detection.zip_fraudTest.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'walkDistance/kills' ]",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: df[ 'killPlace/kills' ]",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'headshotKills/kills' ]",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_12",
            "code": "lambda df: df[ 'kills/walkDistance' ]",
            "dataset": "/data/kaggle-11k/data/csvs/csgo-professional-matches.zip_players.csv"
        },
        {
            "expr": "expr_11",
            "code": "lambda df: df[ 'armed or not' ]",
            "dataset": "/data/kaggle-11k/data/csvs/police-deadly-force-usage-us.zip_fatal-police-shootings-data.csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (df[ 'original_title' ] and df[ 'year' ])",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ 'original_title' ] and (df[ 'year' ] == \"2000\"))",
            "dataset": "/data/kaggle-11k/data/csvs/top2k-books-with-descriptions.zip_top2k_book_descriptions.csv"
        },
        {
            "expr": "expr_8",
            "code": "lambda df: df[ 'true species' ]",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_9",
            "code": "lambda df: df[ 'predicted species' ]",
            "dataset": "/data/kaggle-11k/data/csvs/complete-pokemon-dataset-updated-090420.zip_pokedex_(Update_05.20).csv"
        },
        {
            "expr": "expr_13",
            "code": "lambda df: (numpy.array(df[ 'total_cases_per_million' ]) [-1])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: (df[ 'tests_units' ].mode() [0])",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: df[ 'gdp_per_capita($)' ]",
            "dataset": "/data/kaggle-11k/data/csvs/world-wide-covid-dataset.zip_Worldwide_Covid_Data.csv"
        },
        {
            "expr": "expr_15",
            "code": "lambda df: (df[ 'seat_count' ] and df[ 'seat_count' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_16",
            "code": "lambda df: (df[ 'seat_count' ] and (df[ 'seat_count' ] < 10))",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_17",
            "code": "lambda df: ((df[ 'seat_count' ] >= 6) and df[ 'seat_count' ])",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_18",
            "code": "lambda df: ((df[ 'seat_count' ] >= 6) and (df[ 'seat_count' ] < 10))",
            "dataset": "/data/kaggle-11k/data/csvs/personal-cars-classifieds.zip_all_anonymized_2015_11_2017_03.csv"
        },
        {
            "expr": "expr_14",
            "code": "lambda df: (df[ '[pandas, read_csv, dropna, dropna, drop, drop, winner_rank_points]' ] [0])",
            "dataset": "/data/kaggle-11k/data/csvs/wta-matches-and-rankings.zip_matches.csv"
        },
        {
            "expr": "expr_2",
            "code": "lambda df: df[ 'likes%/views' ]",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_10",
            "code": "lambda df: (df[ 'retweet_count' ].describe() [7])",
            "dataset": "/data/kaggle-11k/data/csvs/us-election-2020-tweets.zip_hashtag_joebiden.csv"
        },
        {
            "expr": "expr_3",
            "code": "lambda df: df[ 'total usa cases' ]",
            "dataset": "/data/kaggle-11k/data/csvs/covid19-challenges.zip_test_data_intl.csv"
        },
        {
            "expr": "expr_21",
            "code": "lambda df: (df[ 'club_name' ].isin({\"0\":\"FC Barcelona\",\"1\":\"Tottenham Hotspur\",\"2\":\"Paris Saint-Germain\",\"3\":\"Chelsea\",\"4\":\"Manchester City\",\"5\":\"Manchester United\",\"6\":\"Arsenal\",\"7\":\"Liverpool\",\"8\":\"Real Madrid\",\"9\":\"Bayern Munich\"}) and df[ 'age' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_24",
            "code": "lambda df: (df[ 'edition' ] and df[ 'league_name' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_25",
            "code": "lambda df: (df[ 'edition' ] and (df[ 'league_name' ] == \"German 1. Bundesliga\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_26",
            "code": "lambda df: ((df[ 'edition' ] == \"15\") and df[ 'league_name' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_27",
            "code": "lambda df: ((df[ 'edition' ] == \"15\") and (df[ 'league_name' ] == \"German 1. Bundesliga\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_29",
            "code": "lambda df: (df[ 'edition' ] and (df[ 'league_name' ] == \"Italian Serie A\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_30",
            "code": "lambda df: ((df[ 'edition' ] == \"20\") and df[ 'league_name' ])",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_31",
            "code": "lambda df: ((df[ 'edition' ] == \"20\") and (df[ 'league_name' ] == \"Italian Serie A\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_60",
            "code": "lambda df: (+ (\",DoF:\" + \",pvalue:\" + (+ (+ \"var_\"))))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_61",
            "code": "lambda df: (+ (\",DoF:\" + \",LogL:\" + \",pvalue:\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_62",
            "code": "lambda df: (+ (\",DoF:\" + \",pvalue:\" + df[ 'edof' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_63",
            "code": "lambda df: (+ (\",LogL:\" + \",pvalue:\" + (+ (+ \"var_\"))))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_64",
            "code": "lambda df: (+ (\",LogL:\" + \",lam:\" + \",pvalue:\"))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_65",
            "code": "lambda df: (+ (\",pvalue:\" + (+ (\",lam:\" + (+ \"var_\"))) + df[ 'edof' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_66",
            "code": "lambda df: (+ (\",pvalue:\" + (+ (+ \"var_\")) + df[ 'edof' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_67",
            "code": "lambda df: (+ (\",DoF:\" + \",pvalue:\" + (+ (\",lam:\" + (+ \"var_\")))))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        },
        {
            "expr": "expr_68",
            "code": "lambda df: (+ (\",DoF:\" + \",pvalue:\" + df[ 'loglikelihood' ]))",
            "dataset": "/data/kaggle-11k/data/csvs/fifa-21-complete-player-dataset.zip_players_18.csv"
        }
    ]
}